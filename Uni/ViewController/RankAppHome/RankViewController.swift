//
//  RankViewController.swift
//  Uni
//
//  Created nguyen gia huy on 05/11/2020.
//  Copyright Â© 2020 ___ORGANIZATIONNAME___. All rights reserved.
//
//  Template generated by Edward
//

import UIKit

class RankViewController: BaseViewController {

    @IBOutlet weak var lbNameProfile: UILabel!
    @IBOutlet weak var lbRankProfile: UILabel!
    @IBOutlet weak var lbScore: UILabel!
    @IBOutlet weak var lbRank: UILabel!
    @IBOutlet weak var lbScoreRank3: UILabel!
    @IBOutlet weak var lbNameRank3: UILabel!
    @IBOutlet weak var imgRank3: UIImageView!
    @IBOutlet weak var lbScoreRank1: UILabel!
    @IBOutlet weak var lbNameRank1: UILabel!
    @IBOutlet weak var imgRank1: UIImageView!
    @IBOutlet weak var lbScoreRank2: UILabel!
    @IBOutlet weak var lbNameRank2: UILabel!
    @IBOutlet weak var imgRank2: UIImageView!
    @IBOutlet weak var heightTableView: NSLayoutConstraint!
    @IBOutlet weak var viewScore: UIView!
    @IBOutlet weak var tableView: UITableView!
    @IBOutlet weak var scrollView: UIScrollView!
    private var pullControl = UIRefreshControl()
    var presenter: RankPresenterProtocol
	init(presenter: RankPresenterProtocol) {
        self.presenter = presenter
        super.init(nibName: "RankViewController", bundle: nil)
    }

    required init?(coder aDecoder: NSCoder) {
        fatalError("init(coder:) has not been implemented")
    }

	override func viewDidLoad() {
        super.viewDidLoad()
        presenter.view = self
        setupXIB()
        setupLanguage()
        setupUI()
        presenter.fetchRank()
        pullRefreshData()
    }
    override func viewWillAppear(_ animated: Bool) {
        viewScore.roundCorners([.topLeft,.topRight], radius: 20)
    }
    
    @objc func pullRefreshControl(sender:AnyObject) {
        presenter.fetchRank()
        
    }
    
    private func pullRefreshData() {
        pullControl.addTarget(self, action: #selector(pullRefreshControl), for: UIControl.Event.valueChanged)
        scrollView.addSubview(pullControl)
        
    }
    func setupLanguage(){
        lbRank.text = AppLanguage.Rank.Rank.localized
        lbScore.text = AppLanguage.Rank.Score.localized
        lbScoreRank1.textColor = AppColor.YellowFAB32A
        lbScoreRank2.textColor = AppColor.YellowFAB32A
        lbScoreRank3.textColor = AppColor.YellowFAB32A
    }
    
    func setupUI(){
        viewScore.backgroundColor = AppColor.YellowFAB32A
        pullControl.tintColor = AppColor.YellowFAB32A
        scrollView.alwaysBounceVertical = true
    }
    
    func setupXIB(){
        tableView.delegate = self
        tableView.dataSource = self
        tableView.register(UINib(nibName: "RankTableViewCell", bundle: nil), forCellReuseIdentifier: "RankTableViewCell")
    }
}

extension RankViewController: UITableViewDataSource {
    
    func tableView(_ tableView: UITableView, numberOfRowsInSection section: Int) -> Int {
        return presenter.rankEvent.count > 3 ? presenter.rankEvent.count - 3 : 0
    }
    
    func tableView(_ tableView: UITableView, cellForRowAt indexPath: IndexPath) -> UITableViewCell {
        if let cell = tableView.dequeueReusableCell(withIdentifier: "RankTableViewCell", for: indexPath) as? RankTableViewCell {
            cell.lbRank.text = "\(indexPath.row + 4)"
            cell.lbName.text = presenter.rankEvent[indexPath.row + 3]?.name
            cell.lbScore.text = "\(presenter.rankEvent[indexPath.row + 3]?.score ?? 0)"
            return cell
        } else { return UITableViewCell()}
    }
}

extension RankViewController: UITableViewDelegate {
    
    func tableView(_ tableView: UITableView, heightForRowAt indexPath: IndexPath) -> CGFloat {
        return 100
    }
    
    func tableView(_ tableView: UITableView, willDisplay cell: UITableViewCell, forRowAt indexPath: IndexPath) {
        self.tableView.layoutIfNeeded()
        self.heightTableView.constant = self.tableView.contentSize.height
    }
}

extension RankViewController: RankViewProtocol {

    func fetchRankSuccess() {
        if presenter.rankEvent.count > 2 {
            lbNameRank3.text = presenter.rankEvent[2]?.name ?? ""
            lbScoreRank3.text = "\(presenter.rankEvent[2]?.score ?? 0)"
            if let eventURL = presenter.rankEvent[2]?.imgURL {
                imgRank3.loadImage(urlString: eventURL)
            }
            lbNameRank2.text = presenter.rankEvent[1]?.name ?? ""
            lbScoreRank2.text = "\(presenter.rankEvent[1]?.score ?? 0)"
            if let eventURL = presenter.rankEvent[1]?.imgURL {
                imgRank2.loadImage(urlString: eventURL)
            }
            lbNameRank1.text = presenter.rankEvent[0]?.name ?? ""
            lbScoreRank1.text = "\(presenter.rankEvent[0]?.score ?? 0)"
            if let eventURL = presenter.rankEvent[0]?.imgURL {
                imgRank1.loadImage(urlString: eventURL)
            }
        }
        if presenter.isFindUserRank {
            lbNameProfile.text = presenter.nameProfile
            lbScore.text = "\(AppLanguage.Rank.Score.localized) \(presenter.scoreProfile)"
            
        }
        for (index, value) in presenter.rankEvent.enumerated() {
            if value?.code == presenter.code {
                lbRankProfile.text = "\(index + 1)"
                lbNameProfile.text = presenter.nameProfile
                lbScore.text = "\(AppLanguage.Rank.Score.localized) \(presenter.scoreProfile)"
            }
        }
        tableView.reloadData()
        pullControl.endRefreshing()
    }
    
    func fetchRanhFailed() {
        
        print("fetch rank failed")
    }
}
