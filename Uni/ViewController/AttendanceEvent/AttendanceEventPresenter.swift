//
//  AttendanceEventPresenter.swift
//  Uni
//
//  Created nguyen gia huy on 23/11/2020.
//  Copyright Â© 2020 ___ORGANIZATIONNAME___. All rights reserved.
//
//  Template generated by Edward
//

import Foundation
import FirebaseAuth
import FirebaseDatabase
import Firebase
import FirebaseStorage
enum typeInput {
    case scan
    case keyboard
}
// MARK: View -
protocol AttendanceEventViewProtocol: class {
    func fetchAttendanceSuccess()
    func fetchAttendanceFailed()
    func userAttendanceSuccess(code: String,type:typeInput)
    func userAttendanceFailed()
    func checkUserAttendanceSuccess(code: String,type:typeInput)
    func checkUserAttendanceFailed(code: String,type:typeInput)
    func checkExistUserSuccess(code:String,type:typeInput)
    func checkExistUserFailed(code:String,type:typeInput)
    func createUserSuccess(code:String)
    func createUserFailed()
    func getScoreEventSuccess(score:Int,code:String)
    func getScoreEventFailed()
    func updateScoreSuccess(scoreEvent:Int,code:String)
    func updateScoreFailed()
    func getScoreUserSuccess(scoreUser:Int,scoreEvent:Int,code:String)
    func getScoreUserFailed()
    func updateListEventOfUserSuccess()
    func updateListEventOfUserFailed()
}

// MARK: Presenter -
protocol AttendanceEventPresenterProtocol: class {
    var view: AttendanceEventViewProtocol? { get set }
    var infoAttendance: [AttendanceEvent?] {get set}
    var scanUser: AttendanceEvent? {get set}
    func fetchAttendance(keyEvent:String)
    func userAttendance(keyUser: String, keyEvent: String,date:String,checkin:String,type:typeInput)
    func checkUserAttendance(keyUser: String,type:typeInput)
    func fetchEventResult(keyEvent: String,keyJoiner:String)
    func checkExistUser(keyEvent:String,code: String,type: typeInput)
    func createUser(code:String)
    func getScoreEvent(keyEvent:String,code:String)
    func updateScore(keyEvent:String,code:String,scoreEvent:Int,scoreUser:Int)
    func getScoreUser(code:String,scoreEvent:Int)
    func updateListEventOfUser(code: String,keyEvent:String,score:Int,date:String,checkin:String)
}

class AttendanceEventPresenter: AttendanceEventPresenterProtocol {

    weak var view: AttendanceEventViewProtocol?
    var ref = Database.database().reference()
    var databaseHandle = DatabaseHandle()
    var user = Auth.auth().currentUser
    let storageRef = Storage.storage().reference()
    var infoAttendance: [AttendanceEvent?] = []
    var scanUser: AttendanceEvent?
    
    func updateListEventOfUser(code: String,keyEvent:String,score:Int,date:String,checkin:String) {
        let path = self.ref.child("Data/\(code)/List").child(keyEvent)
        let sentValue = ["Date":"\(date)","Checkin":"\(checkin)","Score":score] as [String : Any]
        path.setValue(sentValue) { [self]
            (error:Error?, ref:DatabaseReference) in
            if error != nil {
                view?.updateListEventOfUserFailed()
            }
            else
            {
                view?.updateListEventOfUserSuccess()
            }
        }
    }
    
    func updateScore(keyEvent: String, code: String,scoreEvent:Int,scoreUser:Int) {
        let scoreUser = ["Data/\(code)/Score":(scoreUser + scoreEvent)] as [String : Any]
        ref.updateChildValues(scoreUser as [AnyHashable : Any]) { [self] (error, snapshot) in
            if error != nil {
                view?.updateScoreFailed()
            } else {
                view?.updateScoreSuccess(scoreEvent:scoreEvent,code:code)
            }
        }

    }
    
    func getScoreUser(code: String,scoreEvent:Int) {
        let placeRef = self.ref.child("Data/\(code)")
        placeRef.observeSingleEvent(of:.value, with: { [self] snapshot in
            if snapshot.exists()
            {
                let dict = snapshot.value as! [String: Any]
                let score = dict["Score"] as! Int
                
                view?.getScoreUserSuccess(scoreUser: score, scoreEvent: scoreEvent,code: code)
            }
            else
            {
                view?.getScoreUserFailed()
            }
        })
    }
    
    func getScoreEvent(keyEvent: String,code:String) {
        let placeRef = self.ref.child("Event/\(keyEvent)")
        placeRef.observeSingleEvent(of:.value, with: { [self] snapshot in
            if snapshot.exists()
            {
                let dict = snapshot.value as! [String: Any]
                let score = dict["Score"] as! Int
                
                view?.getScoreEventSuccess(score: score,code: code)
            }
            else
            {
                view?.getScoreEventFailed()
            }
        })
    }
    
        
    func userAttendance(keyUser: String, keyEvent: String,date:String,checkin:String,type: typeInput) {
        let path = self.ref.child("Joiner").child(keyEvent).child(keyUser)
        let sentValue = ["Date":"\(date)","Checkin":"\(checkin)"] as [String : Any]
        path.setValue(sentValue) { [self]
            (error:Error?, ref:DatabaseReference) in
            if error != nil {
                view?.userAttendanceFailed()
            }
            else
            {
                view?.userAttendanceSuccess(code: keyUser,type:type)
            }
        }
    }
    
    func checkUserAttendance(keyUser: String,type:typeInput){
        let placeRef = self.ref.child("Data").child("\(keyUser)")
        placeRef.observeSingleEvent(of:.value, with: { [self] snapshot in
            if(snapshot.exists())
            {
                view?.checkUserAttendanceSuccess(code: keyUser,type: type)
            } else {
                view?.checkUserAttendanceFailed(code: keyUser,type: type)
            }
        })
    }
    
    func fetchAttendance(keyEvent:String) {
        ref.child("Joiner/\(keyEvent)").observeSingleEvent(of: .value) { (snapshot) in
            if(snapshot.exists()) {
                for keyJoiner in snapshot.children.allObjects as! [DataSnapshot] {
                    let placeRef = self.ref.child("Joiner/\(keyEvent)/\(keyJoiner.key)")
                    placeRef.observeSingleEvent(of:.value, with: { [self] snapshot in
                        if snapshot.exists()
                        {
                            let placeDict = snapshot.value as! [String: Any]
                            let checkin = placeDict["Checkin"] as! String
                            let date = placeDict["Date"] as! String
                            
                            let placeRef = self.ref.child("Data").child("\(keyJoiner.key)")
                            placeRef.observeSingleEvent(of:.value, with: { [self] snapshot in
                                if(snapshot.exists())
                                {
                                    let placeDict = snapshot.value as! [String: Any]
                                    let name = placeDict["Name"] as! String
                                    let urlImage = placeDict["Image"] as! String
                                    
                                    if infoAttendance.contains(where: {$0?.code == keyJoiner.key}) == false {                           infoAttendance.append(AttendanceEvent(code: keyJoiner.key, name: name, checkin: checkin, date: date, urlImage: urlImage))
                                        
                                    }
                    
                                    
                                    DispatchQueue.main.async {
                                        view?.fetchAttendanceSuccess()
                                    }
                                   
                                    
                                }
                                else
                                {
                                    view?.fetchAttendanceFailed()
                                }
                            })
                        }
                        else
                        {
                            view?.fetchAttendanceFailed()
                        }
                    })
                    
                }
            }
        }
        
    }
    func fetchEventResult(keyEvent: String,keyJoiner:String) {
                    let placeRef = self.ref.child("Joiner/\(keyEvent)/\(keyJoiner)")
                    placeRef.observeSingleEvent(of:.value, with: { [self] snapshot in
                        if snapshot.exists()
                        {
                            let placeDict = snapshot.value as! [String: Any]
                            let checkin = placeDict["Checkin"] as! String
                            let date = placeDict["Date"] as! String
        
                            let placeRef = self.ref.child("Data").child("\(keyJoiner)")
                            placeRef.observeSingleEvent(of:.value, with: { [self] snapshot in
                                if(snapshot.exists())
                                {
                                    let placeDict = snapshot.value as! [String: Any]
                                    let name = placeDict["Name"] as! String
                                    let urlImage = placeDict["Image"] as! String
        
                                    if infoAttendance.contains(where: {$0?.code == keyJoiner}) == false {                           infoAttendance.append(AttendanceEvent(code: keyJoiner, name: name, checkin: checkin, date: date, urlImage: urlImage))
                                        
                                    }
                                    view?.fetchAttendanceSuccess()
        
                                }
                                else
                                {
                                    view?.fetchAttendanceFailed()
                                }
                            })
                        }
                        else
                        {
                                view?.fetchAttendanceFailed()
                        }
                    })
    }
    
    func createUser(code: String) {
            let path = self.ref.child("Data").child(code)
            let sentValue = ["Class":"Unknown","Code":"\(code)","Course":"Unknown","Faculty":"Unknown","Gender":"Unknown","Image":"","Name":"Unknown","Score":0] as [String : Any]
            path.setValue(sentValue) { [self]
                (error:Error?, ref:DatabaseReference) in
                if error != nil {
                    view?.createUserFailed()
                }
                else
                {
                    view?.createUserSuccess(code:code)
                }
            }
    }
    
    func checkExistUser(keyEvent:String,code: String,type:typeInput) {
        let placeRef = self.ref.child("Joiner/\(keyEvent)").child("\(code)")
        placeRef.observeSingleEvent(of:.value, with: { [self] snapshot in
            if(snapshot.exists())
            {
                view?.checkExistUserSuccess(code: code,type: type)
            } else {
                view?.checkExistUserFailed(code: code,type: type)
            }
        })
    }
    
}
