//
//  AttendanceEventViewController.swift
//  Uni
//
//  Created nguyen gia huy on 23/11/2020.
//  Copyright Â© 2020 ___ORGANIZATIONNAME___. All rights reserved.
//
//  Template generated by Edward
//

import UIKit
import BarcodeScanner
import AVFoundation
class AttendanceEventViewController: BaseViewController,AVCaptureMetadataOutputObjectsDelegate {
    @IBOutlet weak var btScan: UIButton!
    @IBOutlet weak var viewButton: UIView!
    @IBOutlet weak var scrollView: UIScrollView!
    @IBOutlet weak var heightCollectionView: NSLayoutConstraint!
    @IBOutlet weak var collectionView: UICollectionView!
    private var pullControl = UIRefreshControl()
    var presenter: AttendanceEventPresenterProtocol
    var listAttendance = [AttendanceEvent?]()
    var keyDetailEvent = ""
    var getkeySearch: (()->Void)? = nil
    var viewController = BarcodeScannerViewController()
	init(presenter: AttendanceEventPresenterProtocol) {
        self.presenter = presenter
        super.init(nibName: "AttendanceEventViewController", bundle: nil)
    }

    required init?(coder aDecoder: NSCoder) {
        fatalError("init(coder:) has not been implemented")
    }

	override func viewDidLoad() {
        super.viewDidLoad()
 
        presenter.view = self
        presenter.fetchAttendance(keyEvent: keyDetailEvent)
        setupUI()
        pullRefreshData()
        addNav()
    }
    
    func setupUI() {
        collectionView.delegate =  self
        collectionView.dataSource = self
        collectionView.register(UINib(nibName: "AttendanceCell", bundle: nil), forCellWithReuseIdentifier: "AttendanceCell")
        collectionView.register(UINib(nibName: "HeaderSearch", bundle: nil), forSupplementaryViewOfKind: UICollectionView.elementKindSectionHeader, withReuseIdentifier: "HeaderSearch")
        
        collectionView.register(UINib(nibName: "HeaderSearch", bundle: nil), forSupplementaryViewOfKind: UICollectionView.elementKindSectionFooter, withReuseIdentifier: "HeaderSearch")
        viewButton.shadowColor = AppColor.YellowShadow
        btScan.setImage(AppIcon.icBarcodeYellow, for: .normal)
    }
    
    func addNav() {
        addButtonImageToNavigation(image: AppIcon.icPlusYellow!, style: .right, action: #selector(addAttendance))
        self.navigationController?.hideShadowLine()
    }
    
    @objc func addAttendance(){
        let alert = UIAlertController(title: "", message: "Attendance", preferredStyle: .alert)
        alert.addTextField(configurationHandler: { (TextField) in
            TextField.placeholder = "Please Enter ID Student"
            TextField.keyboardType = UIKeyboardType.numberPad
        })
        alert.addAction(UIAlertAction(title: "OK", style: .default, handler: { [self] (updateAction) in
            let studentID = alert.textFields!.first!.text!
            let charactersetTextView = CharacterSet(charactersIn: "abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ,[]:;<>,+=-_|!@%^&?$/.{()*&^%#`~'} ")
            if (studentID.rangeOfCharacter(from: charactersetTextView.intersection(charactersetTextView)) != nil){
                
                self.presentAlertWithTitle(title: "Invalid ID", message: "Please try again!", options: "OK") { (Int) in}
            }
            else
            {
                presenter.checkExistUser(keyEvent:keyDetailEvent,code: studentID,type: .keyboard)

            }
        }))
        alert.addAction(UIAlertAction(title: "Cancel", style: .cancel, handler: { _ in
            alert.dismiss(animated: true, completion: nil)
        }))
        self.present(alert, animated: true, completion: nil)
    }
    
    @objc func pulledRefreshControl(sender:AnyObject) {
        pullControl.endRefreshing()
        presenter.infoAttendance = []
        presenter.fetchAttendance(keyEvent: keyDetailEvent)
      }
    
      private func pullRefreshData() {
        pullControl.attributedTitle = NSAttributedString(string: "Pull To Refresh")
        pullControl.addTarget(self, action: #selector(pulledRefreshControl), for: UIControl.Event.valueChanged)
        scrollView.addSubview(pullControl)
      }
    
    @IBAction func scanBarcode(_ sender: Any) {
        let viewController = makeBarcodeScannerViewController()
        viewController.dismissalDelegate = self
        viewController.cameraViewController.showsCameraButton = true
        viewController.messageViewController.messages.notFoundText = "Invalid ID"
        viewController.messageViewController.messages.processingText = "Checking..."
        present(viewController, animated: false, completion: nil)
    }
    
    
    func vibrate()
    {
        let feedbackGenerator = UIImpactFeedbackGenerator(style: .heavy)
        feedbackGenerator.impactOccurred()
    }
    
    func makeBarcodeScannerViewController() -> BarcodeScannerViewController {
        viewController.codeDelegate = self
        viewController.errorDelegate = self
        viewController.dismissalDelegate = self
        viewController.headerViewController.closeButton.tintColor = .red
        return viewController
    }
    
    @objc func actionSearch(sender: UIButton) {
        getkeySearch?()
    }

}

extension AttendanceEventViewController: UICollectionViewDelegateFlowLayout,UICollectionViewDelegate {
    
    func collectionView(_ collectionView: UICollectionView, layout collectionViewLayout: UICollectionViewLayout, sizeForItemAt indexPath: IndexPath) -> CGSize {
        return CGSize(width: collectionView.frame.width / 2 , height: 170 )
    }
    
    func collectionView(_ collectionView: UICollectionView, viewForSupplementaryElementOfKind kind: String, at indexPath: IndexPath) -> UICollectionReusableView {
        switch kind {
        
        case UICollectionView.elementKindSectionHeader:
            
            if let headerView = collectionView.dequeueReusableSupplementaryView(ofKind: kind, withReuseIdentifier: "HeaderSearch", for: indexPath) as? HeaderSearch {
                headerView.btSearch.addTarget(self, action: #selector(actionSearch(sender:)), for: .touchUpInside)
                getkeySearch = { [self] in
                    if let keysearch = headerView.txtSearch.text {
                        presenter.infoAttendance = []
                        if(keysearch.isEmpty == true) {
                            presenter.fetchAttendance(keyEvent: keyDetailEvent)
                        } else {
                            presenter.fetchEventResult(keyEvent: keyDetailEvent, keyJoiner: keysearch)
                        }
                        
                    } else {return}
                    
                }
                return headerView
            } else {
                return UICollectionReusableView()
            }
            
        case UICollectionView.elementKindSectionFooter:
            let headerView = collectionView.dequeueReusableSupplementaryView(ofKind: kind, withReuseIdentifier: "HeaderSearch", for: indexPath)
            
            return headerView
            
        default:
            
            assert(false, "Unexpected element kind")
        }
    }
    
    func collectionView(_ collectionView: UICollectionView, layout collectionViewLayout: UICollectionViewLayout, minimumLineSpacingForSectionAt section: Int) -> CGFloat {
        return 0.0000000
      }
    
    func collectionView(_ collectionView: UICollectionView, layout collectionViewLayout: UICollectionViewLayout, minimumInteritemSpacingForSectionAt section: Int) -> CGFloat {
        return 0.0000000
    }
    
    func collectionView(_ collectionView: UICollectionView, layout collectionViewLayout: UICollectionViewLayout, referenceSizeForHeaderInSection section: Int) -> CGSize {
        return CGSize(width: collectionView.frame.width, height: 118 )
    }
    
    func collectionView(_ collectionView: UICollectionView, layout collectionViewLayout: UICollectionViewLayout, referenceSizeForFooterInSection section: Int) -> CGSize {
        return CGSize(width: 0, height: 0)
    }
}

extension AttendanceEventViewController: UICollectionViewDataSource {
    func collectionView(_ collectionView: UICollectionView, willDisplay cell: UICollectionViewCell, forItemAt indexPath: IndexPath) {
        self.collectionView.layoutIfNeeded()
        self.heightCollectionView.constant = self.collectionView.contentSize.height
    }
    
    func numberOfSections(in collectionView: UICollectionView) -> Int {
        return 1
    }
    
    func collectionView(_ collectionView: UICollectionView, numberOfItemsInSection section: Int) -> Int {
        return listAttendance.count
    }
    
    func collectionView(_ collectionView: UICollectionView, didSelectItemAt indexPath: IndexPath) {
        let profileUser = ProfileViewController(presenter: ProfilePresenter())
        profileUser.fromAttendance = true
        profileUser.keyUser = (listAttendance[indexPath.row]?.code)!
        self.navigationController?.pushViewController(profileUser, animated: true)
    }
    
    func collectionView(_ collectionView: UICollectionView, cellForItemAt indexPath: IndexPath) -> UICollectionViewCell {
        if let cell = collectionView.dequeueReusableCell(withReuseIdentifier: "AttendanceCell", for: indexPath) as? AttendanceCell {
            cell.dateCheckin.text = "\(getFormattedDate(date: listAttendance[indexPath.row]!.date ?? ""))-\(formatterTime(time: listAttendance[indexPath.row]!.checkin ?? ""))"
            cell.codeUser.text = listAttendance[indexPath.row]?.code
            cell.nameUser.text = listAttendance[indexPath.row]?.name
          //  DispatchQueue.main.async { [self] in
                if let profileURL = listAttendance[indexPath.row]?.urlImage {
                    cell.imageUser.loadImage(urlString: profileURL)
                }
           // }
    
            return cell
        }
        else {
            return UICollectionViewCell()
        }
    }
    
    
}

extension AttendanceEventViewController: BarcodeScannerCodeDelegate {
    func scanner(_ controller: BarcodeScannerViewController, didCaptureCode code: String, type: String) {
         print("Barcode Data: \(code)")
         print("Symbology Type: \(type)")
        let charactersetTextView = CharacterSet(charactersIn: "abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ,[]:;<>,+=-_|!@%^&?$/.{()*&^%#`~'} ")
        if (code.rangeOfCharacter(from: charactersetTextView.intersection(charactersetTextView)) != nil){
            DispatchQueue.main.asyncAfter(deadline: .now() + 1.0) {
                controller.messageViewController.errorTintColor = UIColor.systemRed
                controller.resetWithError(message: "Invalid ID")
            }
            
        }
        else
        {
            presenter.checkExistUser(keyEvent:keyDetailEvent,code: code,type: .scan)

        }
    }
}
// MARK: - BarcodeScannerErrorDelegate
extension AttendanceEventViewController: BarcodeScannerErrorDelegate {
    func scanner(_ controller: BarcodeScannerViewController, didReceiveError error: Error) {
        print(error)
    }
}

// MARK: - BarcodeScannerDismissalDelegate
extension AttendanceEventViewController: BarcodeScannerDismissalDelegate {
    func scannerDidDismiss(_ controller: BarcodeScannerViewController) {
        controller.dismiss(animated: true, completion: nil)
    }
}

extension AttendanceEventViewController: AttendanceEventViewProtocol {
    func updateListEventOfUserSuccess() {
        print("update list event of user success")
    }
    
    func updateListEventOfUserFailed() {
        print("update list event of user failed")
    }
    

    func updateListUserFailed() {
        print("update list user success")
    }
    
    func getScoreEventSuccess(score: Int,code:String) {
        presenter.getScoreUser(code: code, scoreEvent: score)
    }
    
    func getScoreEventFailed() {
        print("get score event failed")
    }
    
    func updateScoreSuccess(scoreEvent:Int,code:String) {
        print("get update score success")
        presenter.updateListEventOfUser(code: code, keyEvent: keyDetailEvent, score: scoreEvent, date: getCurrentDate(), checkin: getCurrentTime())
    }
    
    func updateScoreFailed() {
        print("update score failed")
    }
    
    func getScoreUserSuccess(scoreUser: Int, scoreEvent: Int,code:String) {
        presenter.updateScore(keyEvent: keyDetailEvent, code: code, scoreEvent: scoreEvent, scoreUser: scoreUser)
    }
    
    func getScoreUserFailed() {
        print("get score user failed")
    }
    
    
    func checkExistUserSuccess(code: String,type: typeInput) {
        switch type {
        case .scan:
            DispatchQueue.main.asyncAfter(deadline: .now()) { [self] in
                viewController.messageViewController.errorTintColor = UIColor.systemRed
                viewController.resetWithError(message: "\(code)\rAlready exists in event list.")
            }
        case .keyboard:
            presentAlertWithTitle(title: "Opps", message: "\(code)\rAlready exists in event list.", options: "OK") { (Int) in
            }
        }
    }
    
    func checkExistUserFailed(code: String,type:typeInput) {
        presenter.userAttendance(keyUser: code, keyEvent: keyDetailEvent, date: getCurrentDate(), checkin: getCurrentTime(), type: type)
    }
    
    func createUserSuccess(code:String) {
        presenter.getScoreEvent(keyEvent: keyDetailEvent, code: code)
    }
    
    func createUserFailed() {
        print("Create user failed")
    }
    
    func checkUserAttendanceSuccess(code: String,type:typeInput) {
        switch type {
        case .scan:
            DispatchQueue.main.asyncAfter(deadline: .now()) {  [self] in
                viewController.messageViewController.errorTintColor = UIColor.systemGreen
                viewController.resetWithError(message: "Success \rID: \(code)")
            }
        case .keyboard:
            presentAlertWithTitle(title: "Success", message: "Attendance success for ID \(code)", options: "OK") { (Int) in
            }
        }
        presenter.getScoreEvent(keyEvent: keyDetailEvent, code: code)
    }
    
    func checkUserAttendanceFailed(code: String,type:typeInput) {
        switch type {
        case .scan:
            DispatchQueue.main.asyncAfter(deadline: .now()) { [self] in
                viewController.messageViewController.errorTintColor = UIColor.systemGreen
                viewController.resetWithError(message: "Success \rID: \(code)\rPlease update Infomation of the ID")
            }
        case .keyboard:
            presentAlertWithTitle(title: "Success", message: "Please update Infomation of the ID", options: "OK") { (Int) in
            }
        }
        presenter.createUser(code: code)
    }
    
    func userAttendanceSuccess(code: String,type:typeInput) {
        presenter.checkUserAttendance(keyUser: code,type: type)
        presenter.infoAttendance = []
        presenter.fetchAttendance(keyEvent: keyDetailEvent)
        collectionView.reloadData()
    }
    
    func userAttendanceFailed() {
        print("Failed")
    }
    
    func fetchAttendanceSuccess() {
        listAttendance = presenter.infoAttendance
        collectionView.reloadData()
    }
    
    func fetchAttendanceFailed() {
        print("fetch attendance failed")
    }
}
