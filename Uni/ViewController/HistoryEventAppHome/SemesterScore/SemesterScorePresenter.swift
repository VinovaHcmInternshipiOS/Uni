//
//  SemesterScorePresenter.swift
//  Uni
//
//  Created nguyen gia huy on 09/11/2020.
//  Copyright Â© 2020 ___ORGANIZATIONNAME___. All rights reserved.
//
//  Template generated by Edward
//

import Foundation
import FirebaseAuth
import FirebaseDatabase
import Firebase
import FirebaseStorage
import UIKit

// MARK: View -
protocol SemesterScoreViewProtocol: class {
    func fetchHistoryEventSuccess()
    func fetchHistoryEventFailed()
   
}

// MARK: Presenter -
protocol SemesterScorePresenterProtocol: class {
    var view: SemesterScoreViewProtocol? { get set }
    var detailHistory: [DetailHistory?] {get set}
    func fetchHistoryEvent(keyEvent: String)
    
}

class SemesterScorePresenter: SemesterScorePresenterProtocol {
    weak var view: SemesterScoreViewProtocol?
    var ref = Database.database().reference()
    var databaseHandle = DatabaseHandle()
    var user = Auth.auth().currentUser
    var detailHistory: [DetailHistory?] = []
    func fetchHistoryEvent(keyEvent: String) {
        detailHistory.removeAll()
        guard let user = user else { return }
        let placeRef = self.ref.child("Users").child("\(user.uid)")
        placeRef.observe(.value, with: { [self] snapshot in
            if(snapshot.exists())
            {
                let placeDict = snapshot.value as! [String: Any]
                let code = placeDict["Code"] as! String
                
                
                let placeRef = ref.child("Event/\(keyEvent)")
                placeRef.observeSingleEvent(of:.value, with: { [self] (snapshot) in
                    if(snapshot.exists()) {
                        let dict = snapshot.value as! [String: Any]
                        let title = dict["Title"] as! String
                        let score = dict["Score"] as! Int
                        let urrlImage = dict["ImagePortal"] as! String
                        
                        //let placeRef = ref.child("Event/\(keyEvent)/Joiner/\(code)")
                        let placeRef = ref.child("Joiner/\(keyEvent)/\(code)")
                        placeRef.observeSingleEvent(of:.value, with: { [self] snapshot in
                            if snapshot.exists()
                            {
                                let dict = snapshot.value as! [String: Any]
                                let date = dict["Date"] as! String
                                let checkin = dict["Checkin"] as! String
                                detailHistory.insert(DetailHistory(title: title, date: date, checkin: checkin, score: score, key: keyEvent, urlImage: urrlImage), at: 0)
                               // DispatchQueue.main.async {
                                    view?.fetchHistoryEventSuccess()
                               // }
                            }
                            else
                            {
                                view?.fetchHistoryEventFailed()
                            }
                        })
                    } else {
                        view?.fetchHistoryEventFailed()
                    }
                })
            }
            else
            {
                view?.fetchHistoryEventFailed()
            }
        })
        
        
    }
    
    
    
    
}
