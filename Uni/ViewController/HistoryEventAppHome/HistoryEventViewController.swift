//
//  HistoryEventViewController.swift
//  Uni
//
//  Created nguyen gia huy on 06/11/2020.
//  Copyright Â© 2020 ___ORGANIZATIONNAME___. All rights reserved.
//
//  Template generated by Edward
//

import UIKit

class HistoryEventViewController: BaseViewController {
    
    @IBOutlet weak var lbYourHistory: UILabel!
    @IBOutlet weak var viewTotalScore: UIView!
    @IBOutlet weak var viewTotalEvent: UIView!
    @IBOutlet weak var collectionView: UICollectionView!
    @IBOutlet weak var heightCollectionView: NSLayoutConstraint!
    @IBOutlet weak var totalEvent: UILabel!
    @IBOutlet weak var totalScore: UILabel!
    var updateLikeHomeVC: ((_ keyEvent: String,_ stateLike:Bool)->Void)? = nil
    var totalSemester = [String]()
    var infoEvents = [History?]()
    var dataEvent = [History?]()
    var presenter: HistoryEventPresenterProtocol
    
    init(presenter: HistoryEventPresenterProtocol) {
        self.presenter = presenter
        super.init(nibName: "HistoryEventViewController", bundle: nil)
    }
    
    required init?(coder aDecoder: NSCoder) {
        fatalError("init(coder:) has not been implemented")
    }
    
    override func viewDidLoad() {
        super.viewDidLoad()
        setupUI()
        setupLanguage()
        presenter.view = self
        presenter.fetchHistoryScore()
        presenter.fetchHistoryEvent()
        presenter.fetchSemester()
        
    }
    
    func setupLanguage(){
        lbYourHistory.text = AppLanguage.History.YourHistory.localized
    }
    
    func setupUI(){
        collectionView.dataSource = self
        collectionView.delegate = self
        collectionView.register(UINib(nibName:"HistoryCell", bundle: nil), forCellWithReuseIdentifier: "HistoryCell")
        collectionView.register(UINib(nibName: "HeaderHistory", bundle: nil), forSupplementaryViewOfKind: UICollectionView.elementKindSectionHeader, withReuseIdentifier: "HeaderHistory")
        
        collectionView.register(UINib(nibName: "HeaderHistory", bundle: nil), forSupplementaryViewOfKind: UICollectionView.elementKindSectionFooter, withReuseIdentifier: "HeaderHistory")
        viewTotalEvent.backgroundColor = AppColor.YellowFBC459
        viewTotalScore.backgroundColor = AppColor.YellowFBC459
        
    }
    
}

extension HistoryEventViewController: UICollectionViewDelegate,UICollectionViewDelegateFlowLayout {
    
    func collectionView(_ collectionView: UICollectionView, layout collectionViewLayout: UICollectionViewLayout, sizeForItemAt indexPath: IndexPath) -> CGSize {
        return CGSize(width: collectionView.frame.width / 2 - 10, height: collectionView.frame.width / 2 - 10 )
    }
    
    func collectionView(_ collectionView: UICollectionView, viewForSupplementaryElementOfKind kind: String, at indexPath: IndexPath) -> UICollectionReusableView {
        switch kind {
        
        case UICollectionView.elementKindSectionHeader:
            
            if let headerView = collectionView.dequeueReusableSupplementaryView(ofKind: kind, withReuseIdentifier: "HeaderHistory", for: indexPath) as? HeaderHistory {
                headerView.backgroundColor = .none
                headerView.lbYear.text = "\(totalSemester[indexPath.section])"
                
                return headerView
            } else {
                return UICollectionReusableView()
            }
            
        case UICollectionView.elementKindSectionFooter:
            let headerView = collectionView.dequeueReusableSupplementaryView(ofKind: kind, withReuseIdentifier: "HeaderHistory", for: indexPath)
            
            return headerView
            
        default:
            
            assert(false, "Unexpected element kind")
        }
    }
    
    func collectionView(_ collectionView: UICollectionView, layout collectionViewLayout: UICollectionViewLayout, referenceSizeForHeaderInSection section: Int) -> CGSize {
        return CGSize(width: collectionView.frame.width, height: 45)
    }
    func collectionView(_ collectionView: UICollectionView, layout collectionViewLayout: UICollectionViewLayout, referenceSizeForFooterInSection section: Int) -> CGSize {
        return CGSize(width: 0, height: 0)
    }
    
}

extension HistoryEventViewController: UICollectionViewDataSource {
    
    func collectionView(_ collectionView: UICollectionView, willDisplay cell: UICollectionViewCell, forItemAt indexPath: IndexPath) {
        self.collectionView.layoutIfNeeded()
        self.heightCollectionView.constant = self.collectionView.contentSize.height
    }
    
    func numberOfSections(in collectionView: UICollectionView) -> Int {
        return totalSemester.count
    }
    
    func collectionView(_ collectionView: UICollectionView, numberOfItemsInSection section: Int) -> Int {
        return 2
    }
    
    func collectionView(_ collectionView: UICollectionView, didSelectItemAt indexPath: IndexPath) {
        dataEvent.removeAll()
        switch indexPath.row {
        case 0:
            for i in 0..<infoEvents.count {
                if (infoEvents[i]?.Year == totalSemester[indexPath.section]) {
                    if (infoEvents[i]?.Month == "01" || infoEvents[i]?.Month == "02" || infoEvents[i]?.Month == "03" || infoEvents[i]?.Month == "04" || infoEvents[i]?.Month == "05" || infoEvents[i]?.Month == "06") {
                        dataEvent.append(History(Year: infoEvents[i]!.Year, Month: infoEvents[i]!.Month, Score: infoEvents[i]!.Score, Key: infoEvents[i]!.Key))
                    }
                    
                }
            }
        case 1:
            for i in 0..<infoEvents.count {
                if (infoEvents[i]?.Year == totalSemester[indexPath.section]) {
                    if (infoEvents[i]?.Month == "07" || infoEvents[i]?.Month == "08" || infoEvents[i]?.Month == "09" || infoEvents[i]?.Month == "10" || infoEvents[i]?.Month == "11" || infoEvents[i]?.Month == "12") {
                        dataEvent.append(History(Year: infoEvents[i]!.Year, Month: infoEvents[i]!.Month, Score: infoEvents[i]!.Score, Key: infoEvents[i]!.Key))
                        
                    }
                    
                }
            }
        default:
            break
        }
        let semesterEvent = SemesterScoreViewController(presenter: SemesterScorePresenter())
        semesterEvent.dataSemester = dataEvent
        semesterEvent.dataLabelYear = totalSemester[indexPath.section]
        semesterEvent.dataLabelSemester = AppLanguage.Semester.Semester.localized + " \(indexPath.row + 1)"
        semesterEvent.updateLikeHomeVC = { [self] keyEvent,stateLike in
            updateLikeHomeVC?(keyEvent,stateLike)
        }
        self.navigationController?.pushViewController(semesterEvent, animated: true)
    }
    
    func collectionView(_ collectionView: UICollectionView, cellForItemAt indexPath: IndexPath) -> UICollectionViewCell {
        if let cell = collectionView.dequeueReusableCell(withReuseIdentifier: "HistoryCell", for: indexPath) as? HistoryCell {
            switch indexPath.row {
            case 0:
                cell.lbNumberSemester.text = "1"
                return cell
            case 1:
                cell.lbNumberSemester.text = "2"
                return cell
            default:
                break
            }
            return cell
        }
        else {
            return UICollectionViewCell()
        }
    }
    
    
}

extension HistoryEventViewController: HistoryEventViewProtocol {
    func fetchScoreEventOfUser() {
        totalSemester = presenter.totalYear!
        collectionView.reloadData()
    }
    
    func fetchSemesterSuccess() {
        infoEvents = presenter.infoEvent!
        collectionView.reloadData()
        
    }
    
    func fetchSemesterFailed() {
        print("fetch semester failed")
    }
    
    func fetchHistoryScoreSuccess() {
        let score = presenter.totalScore
        if let score = score {
            totalScore.text = AppLanguage.History.TotalScore.localized + " \(score)"
        } else { return }
    }
    
    func fetchHistoryScoreFailed() {
        print("fetch history score failed")
    }
    
    func fetchHistoryEventSuccess() {
        let event = presenter.totalEvent
        if let event = event {
            totalEvent.text = AppLanguage.History.TotalEvent.localized + " \(event)"
        } else { return }
    }
    
    func fetchHistoryEventFailed() {
        print("fetch history event failed")
    }
    
    
}
