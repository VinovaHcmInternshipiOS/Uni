//
//  UpdateEventPresenter.swift
//  Uni
//
//  Created nguyen gia huy on 24/11/2020.
//  Copyright Â© 2020 ___ORGANIZATIONNAME___. All rights reserved.
//
//  Template generated by Edward
//

import Foundation
import FirebaseAuth
import FirebaseDatabase
import Firebase
import FirebaseStorage
import UIKit

// MARK: View -
protocol UpdateEventViewProtocol: class {
    func fetchDetailSuccess()
    func fetchDetailFailed()
    func updateEventSuccess()
    func updateEventFailed()
    func uploadImageLandscapeSuccess(keyRef:String)
    func uploadImagePortalSuccess(keyRef:String)
    func uploadImageLandscapeFailed()
    func uploadImagePortalFailed()
    func updateImageEventSuccess()
    func updateImageEventFailed()
}

// MARK: Presenter -
protocol UpdateEventPresenterProtocol: class {
	var view: UpdateEventViewProtocol? { get set }
    var detailEvent: DetailEvent? {get set}
    func getDetailEvent(keyEvent: String)
    func updateEvent(urlImgLanscape: String,urlImgPortal:String,title:String,overview:String,location:String,date:String,checkin:String,checkout:String,score:Int,keyEvent:String)
    func uploadImage(image: UIImage,type:typeImage,path:String)
    func updateImageEvent(keyRef:String,path:String,type:typeImage)
}

class UpdateEventPresenter: UpdateEventPresenterProtocol {
    weak var view: UpdateEventViewProtocol?
    var ref = Database.database().reference()
    var databaseHandle = DatabaseHandle()
    var detailEvent: DetailEvent?
    let storageRef = Storage.storage().reference()
    
    func getDetailEvent(keyEvent: String) {
        let placeRef = self.ref.child("Event/\(keyEvent)")
        placeRef.observe(.value, with: { [self] snapshot in
            if snapshot.exists()
            {
                let dict = snapshot.value as! [String: Any]
                let title = dict["Title"] as! String
                let content = dict["Overview"] as! String
                let address = dict["Location"] as! String
                let score = dict["Score"] as! Int
                
                let date = dict["Date"] as! String
                let checkin = dict["Checkin"] as! String
                let checkout = dict["Checkout"] as! String
                let urlImagePortal = dict["ImagePortal"] as! String
                let urlImageLandscape = dict["ImageLandscape"] as! String
                
                detailEvent = DetailEvent(title: title, content: content, address: address, score: score, date: date, checkin: checkin, checkout: checkout, urlImageLandscape:urlImageLandscape,urlImagePortal: urlImagePortal)

                view?.fetchDetailSuccess()
            }
            else
            {
                view?.fetchDetailFailed()
            }
        })
    }
    
    func updateEvent(urlImgLanscape: String, urlImgPortal: String, title: String, overview: String, location: String, date: String, checkin: String, checkout: String, score: Int,keyEvent:String) {
        let path = self.ref.child("Event/\(keyEvent)")
        let sentValue = ["ImageLandscape":"\(urlImgLanscape)","ImagePortal":"\(urlImgPortal)","Title":"\(title)","Overview":"\(overview)","Location":"\(location)","Date":"\(date)","Checkin":"\(checkin)","Checkout":"\(checkout)","Score":score,"Key":keyEvent,"Type":"ComingSoon"] as [String : Any]
        path.setValue(sentValue) { [self]
            (error:Error?, ref:DatabaseReference) in
            if error != nil {
                view?.updateEventFailed()
            }
            else
            {
                view?.updateEventSuccess()
            }
        }
    }
    
    func uploadImage(image:UIImage,type:typeImage,path:String) {
            let storedImage = storageRef.child("Event/\(path)/\(image.hashValue)")
            if let uploadData = image.jpegData(compressionQuality: 1)
            {
                let metaData = StorageMetadata()
                metaData.contentType = "image/jpg"
                storedImage.putData(uploadData, metadata: metaData, completion: { [self]  (metadata, error) in
                    if error != nil {
                        switch type {
                        case .Landscape:
                            view?.uploadImageLandscapeFailed()
                        case .Portal:
                            view?.uploadImagePortalFailed()

                        }
                    }
                    else {
                        switch type {
                        case .Landscape:
                            view?.uploadImageLandscapeSuccess(keyRef: storedImage.fullPath)
                        case .Portal:
                            view?.uploadImagePortalSuccess(keyRef: storedImage.fullPath)
                        }
                    }
                })
                
            }
    }
    
    func updateImageEvent(keyRef: String, path: String, type: typeImage) {
        let ImageEvent = ["Event/\(path)/Image\(type)":(keyRef)] as [String : Any]
        ref.updateChildValues(ImageEvent as [AnyHashable : Any]) { [self] (error, snapshot) in
            if error != nil {
                view?.updateImageEventFailed()
            } else {
                switch type {
                case .Portal:
                    view?.updateImageEventSuccess()
                case .Landscape: break
                    
                }
                
            }
        }
    }

}
