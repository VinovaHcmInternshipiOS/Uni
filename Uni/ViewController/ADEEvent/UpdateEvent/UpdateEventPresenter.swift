//
//  UpdateEventPresenter.swift
//  Uni
//
//  Created nguyen gia huy on 24/11/2020.
//  Copyright Â© 2020 ___ORGANIZATIONNAME___. All rights reserved.
//
//  Template generated by Edward
//

import Foundation
import FirebaseAuth
import FirebaseDatabase
import Firebase
import FirebaseStorage
import UIKit

// MARK: View -
protocol UpdateEventViewProtocol: class {
    func fetchDetailSuccess()
    func fetchDetailFailed()
    func updateEventSuccess()
    func updateEventFailed()
    func uploadImageLandscapeSuccess(keyRef:String)
    func uploadImagePortalSuccess(keyRef:String)
    func uploadImageLandscapeFailed()
    func uploadImagePortalFailed()
    func updateImageEventSuccess()
    func updateImageEventFailed()
}

// MARK: Presenter -
protocol UpdateEventPresenterProtocol: class {
    var view: UpdateEventViewProtocol? { get set }
    var detailEvent: DetailEvent? {get set}
    var keyEvent: String {get set}
    func getDetailEvent()
    func updateEvent(urlImgLanscape: String,urlImgPortal:String,title:String,overview:String,location:String,date:String,checkin:String,checkout:String,score:Int)
    func uploadImage(image: UIImage,type:typeImage)
    func updateImageEvent(keyRef:String,type:typeImage)
    func updateScoreUser(score: Int)
}

class UpdateEventPresenter: UpdateEventPresenterProtocol {
    var keyEvent: String
    weak var view: UpdateEventViewProtocol?
    var ref = Database.database().reference()
    var databaseHandle = DatabaseHandle()
    var detailEvent: DetailEvent?
    let storageRef = Storage.storage().reference()
    init(keyEvent: String) {
        self.keyEvent = keyEvent
    }
    func getDetailEvent() {
        let placeRef = self.ref.child("Event/\(keyEvent)")
        placeRef.observe(.value, with: { [self] snapshot in
            if snapshot.exists()
            {
                let dict = snapshot.value as! [String: Any]
                let title = dict["Title"] as! String
                let content = dict["Overview"] as! String
                let address = dict["Location"] as! String
                let score = dict["Score"] as! Int
                
                let date = dict["Date"] as! String
                let checkin = dict["Checkin"] as! String
                let checkout = dict["Checkout"] as! String
                let urlImagePortal = dict["ImagePortal"] as! String
                let urlImageLandscape = dict["ImageLandscape"] as! String
                
                detailEvent = DetailEvent(title: title, content: content, address: address, score: score, date: date, checkin: checkin, checkout: checkout, urlImageLandscape:urlImageLandscape,urlImagePortal: urlImagePortal)
                
                view?.fetchDetailSuccess()
            }
            else
            {
                view?.fetchDetailFailed()
            }
        })
    }
    
    func updateEvent(urlImgLanscape: String, urlImgPortal: String, title: String, overview: String, location: String, date: String, checkin: String, checkout: String, score: Int) {
        let path = self.ref.child("Event/\(keyEvent)")
        let sentValue = ["ImageLandscape":"\(urlImgLanscape)","ImagePortal":"\(urlImgPortal)","Title":"\(title)","Overview":"\(overview)","Location":"\(location)","Date":"\(date)","Checkin":"\(checkin)","Checkout":"\(checkout)","Score":score,"Key":keyEvent,"Type":"ComingSoon"] as [String : Any]
        path.setValue(sentValue) { [self]
            (error:Error?, ref:DatabaseReference) in
            if error != nil {
                view?.updateEventFailed()
            }
            else
            {   
                view?.updateEventSuccess()
                updateScoreUser(score: score)
            }
        }
    }
    func updateScoreUser(score: Int) {
        ref.child("Data").observeSingleEvent(of: .value) { [self] (snapshot) in
            if(snapshot.exists()) {
                for keyUser in snapshot.children.allObjects as! [DataSnapshot] {
                    
                    let placeRef = ref.child("Data/\(keyUser.key)")
                    placeRef.observeSingleEvent(of:.value, with: { [self] snapshot in
                        if snapshot.exists()
                        {
                            let dict = snapshot.value as! [String: Any]
                            let scoreUser = dict["Score"] as? Int ?? 0
                            
                            
                            let placeRef = self.ref.child("Data/\(keyUser.key)/List/\(keyEvent)")
                            placeRef.observeSingleEvent(of:.value, with: { [] snapshot in
                                if snapshot.exists()
                                {
                                    
                                    let dict = snapshot.value as! [String: Any]
                                    let scoreEvent = dict["Score"] as? Int ?? 0
                                    
                                    ref.child("Data/\(keyUser.key)/List/\(keyEvent)/Score").setValue(score) { []
                                        (error:Error?, ref:DatabaseReference) in
                                        if error != nil {
                                            
                                        }
                                        else
                                        {
                                            self.ref.child("Data/\(keyUser.key)/Score").setValue(scoreUser - scoreEvent + score) { []
                                                (error:Error?, ref:DatabaseReference) in
                                                if error != nil {
                                                    
                                                }
                                                else
                                                {
                                                    
                                                }
                                            }
                                        }
                                    }
                                    
                                    
                                    
                                }
                                else
                                {
                                    
                                }
                            })
                            
                        } else {
                            
                        }
                    })
                    
                    
                    
                }
            }
        }
        
    }
    func uploadImage(image:UIImage,type:typeImage) {
        let storedImage = storageRef.child("Event/\(keyEvent)/\(image.hashValue)")
        if let uploadData = image.jpegData(compressionQuality: 1)
        {
            let metaData = StorageMetadata()
            metaData.contentType = "image/jpg"
            storedImage.putData(uploadData, metadata: metaData, completion: { [self]  (metadata, error) in
                if error != nil {
                    switch type {
                    case .Landscape:
                        view?.uploadImageLandscapeFailed()
                    case .Portal:
                        view?.uploadImagePortalFailed()
                        
                    }
                }
                else {
                    switch type {
                    case .Landscape:
                        view?.uploadImageLandscapeSuccess(keyRef: storedImage.fullPath)
                    case .Portal:
                        view?.uploadImagePortalSuccess(keyRef: storedImage.fullPath)
                    }
                }
            })
            
        }
    }
    
    func updateImageEvent(keyRef: String, type: typeImage) {
        let ImageEvent = ["Event/\(keyEvent)/Image\(type)":(keyRef)] as [String : Any]
        ref.updateChildValues(ImageEvent as [AnyHashable : Any]) { [self] (error, snapshot) in
            if error != nil {
                view?.updateImageEventFailed()
            } else {
                switch type {
                case .Portal:
                    view?.updateImageEventSuccess()
                case .Landscape: break
                    
                }
                
            }
        }
    }
    
}
