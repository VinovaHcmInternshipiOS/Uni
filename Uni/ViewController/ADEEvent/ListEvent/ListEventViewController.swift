//
//  ListEventViewController.swift
//  Uni
//
//  Created nguyen gia huy on 23/11/2020.
//  Copyright Â© 2020 ___ORGANIZATIONNAME___. All rights reserved.
//
//  Template generated by Edward
//

import UIKit
import SkeletonView

class ListEventViewController: BaseViewController {

    @IBOutlet weak var lbNoData: UILabel!
    @IBOutlet weak var scrollView: UIScrollView!
    @IBOutlet weak var lbListEvent: UILabel!
    @IBOutlet weak var btCreate: UIButton!
    @IBOutlet weak var viewButton: UIView!
    @IBOutlet weak var heightCollectionView: NSLayoutConstraint!
    @IBOutlet weak var collectionView: UICollectionView!
    var presenter: ListEventPresenterProtocol
    var ListEvent = [Event?]()
    var clearSearchText: (()->Void)? = nil
    var getkeySearch: (()->Void)? = nil
    var deleteActionHandler: ((UIAlertAction) -> Void)? = nil
    var cancelActionHandler: ((UIAlertAction) -> Void)? = nil
    private var pullControl = UIRefreshControl()
	init(presenter: ListEventPresenterProtocol) {
        self.presenter = presenter
        super.init(nibName: "ListEventViewController", bundle: nil)
    }

    required init?(coder aDecoder: NSCoder) {
        fatalError("init(coder:) has not been implemented")
    }

	override func viewDidLoad() {
        super.viewDidLoad()

        presenter.view = self
        setupUI()
        setupLanguage()
        presenter.fetchEvent()
    }
    
    override func viewDidAppear(_ animated: Bool) {
        //showSpinner()
    }
    
    func setupLanguage(){
        lbListEvent.text = AppLanguage.ListEvent.ListEvent.localized
        lbNoData.text = AppLanguage.HandleError.noData.localized
    }
    
    func setupUI() {
        collectionView.delegate = self
        collectionView.dataSource = self
        collectionView.register(UINib(nibName: "ListEventCell", bundle: nil), forCellWithReuseIdentifier: "ListEventCell")
        collectionView.register(UINib(nibName: "HeaderSearch", bundle: nil), forSupplementaryViewOfKind: UICollectionView.elementKindSectionHeader, withReuseIdentifier: "HeaderSearch")
        
        collectionView.register(UINib(nibName: "HeaderSearch", bundle: nil), forSupplementaryViewOfKind: UICollectionView.elementKindSectionFooter, withReuseIdentifier: "HeaderSearch")
        viewButton.shadowColor = AppColor.YellowShadow
        btCreate.setImage(AppIcon.icPlusYellow, for: .normal)
        pullControl.tintColor = AppColor.YellowFAB32A
        skeletonView()
        pullRefreshData()
        
    }
    
    func skeletonView(){
        collectionView.isSkeletonable = true
        collectionView.showAnimatedSkeleton(usingColor: UIColor.clouds, animation: nil, transition:.crossDissolve(0.25))
    }
    
    func refreshListEvent() {
        skeletonView()
       // presenter.infoEvent.removeAll()
        presenter.fetchEvent()
    }
    
    @objc func pulledRefreshControl(sender:AnyObject) {
        clearSearchText?()
        refreshListEvent()
        
    }
    
    private func pullRefreshData() {
        pullControl.addTarget(self, action: #selector(pulledRefreshControl), for: UIControl.Event.valueChanged)
        scrollView.alwaysBounceVertical = true
        scrollView.addSubview(pullControl)

    }
    
    @IBAction func createEvent(_ sender: UIButton) {
        let createEvent = CreateEventViewController(presenter: CreateEventPresenter())
        navigationController?.pushViewController(createEvent, animated: true)
        createEvent.refreshListEvent = { [self] in
            refreshListEvent()
        }
    }
    
    @objc func actionSearch(sender: UIButton) {
        skeletonView()
        lbNoData.isHidden = true
        getkeySearch?()
    }
    
    
    func remakeData(){
        ListEvent = presenter.infoEvent
        collectionView.hideSkeleton()
        collectionView.insertItems(at: [IndexPath(row: ListEvent.count - 1, section: 0)])
        collectionView.performBatchUpdates({
            collectionView.reloadItems(at: [IndexPath(row: ListEvent.count - 1, section: 0)])
        }){_ in
            // optional closure
            print("finished updating cell")
        }
        
        checkEmptyData()
    }
    
    func checkEmptyData(){
        if ListEvent.count != 0 {
            lbNoData.isHidden = true
        } else {
            lbNoData.isHidden = false
        }
    }

}

extension ListEventViewController: SkeletonCollectionViewDataSource {
  func collectionSkeletonView(_ skeletonView: UICollectionView, cellIdentifierForItemAt indexPath: IndexPath) -> ReusableCellIdentifier {
    return "ListEventCell"
  }
  func collectionSkeletonView(_ skeletonView: UICollectionView, numberOfItemsInSection section: Int) -> Int {
    return 6
  }
  func collectionSkeletonView(_ skeletonView: UICollectionView, supplementaryViewIdentifierOfKind: String, at indexPath: IndexPath) -> ReusableCellIdentifier? {
    return "HeaderSearch"
  }
  func numSections(in collectionSkeletonView: UICollectionView) -> Int {
    return 1
  }
    
}

extension ListEventViewController: UICollectionViewDelegateFlowLayout,UICollectionViewDelegate {
    
    func collectionView(_ collectionView: UICollectionView, layout collectionViewLayout: UICollectionViewLayout, sizeForItemAt indexPath: IndexPath) -> CGSize {
        return CGSize(width: collectionView.frame.width / 2 - 1, height: 340 )
    }
    
    func collectionView(_ collectionView: UICollectionView, viewForSupplementaryElementOfKind kind: String, at indexPath: IndexPath) -> UICollectionReusableView {
        switch kind {
        
        case UICollectionView.elementKindSectionHeader:
            
            if let headerView = collectionView.dequeueReusableSupplementaryView(ofKind: kind, withReuseIdentifier: "HeaderSearch", for: indexPath) as? HeaderSearch {
                headerView.txtSearch.placeholder = AppLanguage.SearchEvent.Search.localized
                headerView.backgroundColor = .none
                getkeySearch = { [self] in
                    presenter.fetchEventResult(keyEvent: headerView.txtSearch.text!)
                }
                clearSearchText = {
                    headerView.txtSearch.text = ""
                }
                headerView.btSearch.addTarget(self, action: #selector(actionSearch(sender:)), for: .touchUpInside)
                
                
                return headerView
            } else {
                return UICollectionReusableView()
            }
            
        case UICollectionView.elementKindSectionFooter:
            let headerView = collectionView.dequeueReusableSupplementaryView(ofKind: kind, withReuseIdentifier: "HeaderSearch", for: indexPath)
            
            return headerView
            
        default:
            
            assert(false, "Unexpected element kind")
        }
    }
    
    func collectionView(_ collectionView: UICollectionView, layout collectionViewLayout: UICollectionViewLayout, minimumLineSpacingForSectionAt section: Int) -> CGFloat {
        return 0.000000
      }
    
    func collectionView(_ collectionView: UICollectionView, layout collectionViewLayout: UICollectionViewLayout, minimumInteritemSpacingForSectionAt section: Int) -> CGFloat {
        return 0.0000000
    }
    
    func collectionView(_ collectionView: UICollectionView, layout collectionViewLayout: UICollectionViewLayout, referenceSizeForHeaderInSection section: Int) -> CGSize {
        return CGSize(width: collectionView.frame.width, height: 118 )
    }
    
    func collectionView(_ collectionView: UICollectionView, layout collectionViewLayout: UICollectionViewLayout, referenceSizeForFooterInSection section: Int) -> CGSize {
        return CGSize(width: 0, height: 0)
    }
    
}

extension ListEventViewController: UICollectionViewDataSource {
    func collectionView(_ collectionView: UICollectionView, willDisplay cell: UICollectionViewCell, forItemAt indexPath: IndexPath) {
        self.collectionView.layoutIfNeeded()
        self.heightCollectionView.constant = self.collectionView.contentSize.height
    }
    
    func numberOfSections(in collectionView: UICollectionView) -> Int {
        return 1
    }
    
    func collectionView(_ collectionView: UICollectionView, numberOfItemsInSection section: Int) -> Int {
        return ListEvent.count
    }
    
    func collectionView(_ collectionView: UICollectionView, didSelectItemAt indexPath: IndexPath) {
        let AttendanceEvent = AttendanceEventViewController(presenter: AttendanceEventPresenter())
        AttendanceEvent.keyDetailEvent = (ListEvent[indexPath.row]?.key)!
        navigationController?.pushViewController(AttendanceEvent, animated: true)
    }
    
    func collectionView(_ collectionView: UICollectionView, cellForItemAt indexPath: IndexPath) -> UICollectionViewCell {
        if let cell = collectionView.dequeueReusableCell(withReuseIdentifier: "ListEventCell", for: indexPath) as? ListEventCell {
            cell.dateEvent.text = "\(getFormattedDate(date: ListEvent[indexPath.row]!.date ?? ""))\n\(formatterTime(time: ListEvent[indexPath.row]!.checkin ?? ""))-\(formatterTime(time: ListEvent[indexPath.row]!.checkout ?? ""))"

            cell.titleEvent.text = ListEvent[indexPath.row]?.title
            if let profileURL = ListEvent[indexPath.row]?.urlImage {
                cell.imgEvent.loadImage(urlString: profileURL)
            }
            cell.delete = { [self] in
                presenter.removeEvent(keyEvent: (ListEvent[indexPath.row]?.key)!)
            }
            cell.update = { [self] in
                let updateEvent = UpdateEventViewController(presenter: UpdateEventPresenter(keyEvent: (ListEvent[indexPath.row]?.key)!))
                updateEvent.updateListEvent = { [self] in
                    refreshListEvent()
                }
                navigationController?.pushViewController(updateEvent, animated: true)
            }
            return cell
        }
        else {
            return UICollectionViewCell()
        }
    }
    
    
}

extension ListEventViewController: ListEventViewProtocol{
    func checkJoinerSuccess() {
        removeSpinner()
        checkEmptyData()
        print("Cannot remove event")
    }

    func checkJoinerFailed(keyEvent:String) {
        
        removeSpinner()
        showAlert(title: "Confirm", message: "Do you want to delete this event", actionTitles: ["Cancel","Delete"], style: [.default,.destructive], actions: [cancelActionHandler,deleteActionHandler])
        checkEmptyData()
    }
    
    func removeEventSuccess() {
        refreshListEvent()
        removeSpinner()
        checkEmptyData()
        print("remove event success")
    }
    
    func removeEventFailed() {
        removeSpinner()
        print("remove event failed")
    }
    
    func fetchEventSearchSuccess() {
        remakeData()
    }
    
    func fetchEventSearchFailed() {
        //remakeData()
        ListEvent.removeAll()
        collectionView.hideSkeleton()
        checkEmptyData()
    }
    
    func fetchEventSuccess() {
        remakeData()
        pullControl.endRefreshing()
        removeSpinner()
        
    }
    
    func fetchEventFailed() {
        checkEmptyData()
        print("fetch list event failed")
        pullControl.endRefreshing()
        collectionView.hideSkeleton()
        //collectionView.reloadData()
    }
    
    
}
    
