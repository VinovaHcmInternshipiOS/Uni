//
//  ListEventPresenter.swift
//  Uni
//
//  Created nguyen gia huy on 23/11/2020.
//  Copyright Â© 2020 ___ORGANIZATIONNAME___. All rights reserved.
//
//  Template generated by Edward
//

import Foundation
import FirebaseAuth
import FirebaseDatabase
import Firebase
import FirebaseStorage

// MARK: View -
protocol ListEventViewProtocol: class {
    func fetchEventSuccess()
    func fetchEventFailed()
    func fetchEventSearchSuccess()
    func fetchEventSearchFailed()
    func removeEventSuccess()
    func removeEventFailed()
    func checkJoinerSuccess()
    func checkJoinerFailed(keyEvent:String)
    func eventExistUser()
    func getDateTimeEventSuccess(keyEvent: String)
    func getDateTimeEventFailed()
}

// MARK: Presenter -
protocol ListEventPresenterProtocol: class {
    var view: ListEventViewProtocol? { get set }
    var infoEvent: [Event?] {get set}
    var dateEvent: String? {get set}
    var checkinEvent: String? {get set}
    var checkoutEvent: String? {get set}
    func fetchEvent()
    func fetchEventResult(keySearch: String)
    func removeEvent(keyEvent: String)
    func checkJoiner(keyEvent: String)
    func getDateTimeEvent(keyEvent: String)
    
}

class ListEventPresenter: ListEventPresenterProtocol {
    weak var view: ListEventViewProtocol?
    var ref = Database.database().reference()
    var databaseHandle = DatabaseHandle()
    var user = Auth.auth().currentUser
    let storageRef = Storage.storage().reference()
    var infoEvent: [Event?] = []
    var checkinEvent: String?
    var checkoutEvent: String?
    var dateEvent: String?
    
 
    
    func checkJoiner(keyEvent: String) {
        let placeRef = self.ref.child("Joiner/\(keyEvent)")
        placeRef.observeSingleEvent(of:.value, with: { [self] snapshot in
            if snapshot.exists(){
                view?.checkJoinerSuccess()
            } else {
                view?.checkJoinerFailed(keyEvent: keyEvent)
            }
        })
    }
    
    func getDateTimeEvent(keyEvent: String) {
        let placeRef = self.ref.child("Event/\(keyEvent)")
        placeRef.observeSingleEvent(of:.value, with: { [self] snapshot in
            if snapshot.exists()
            {
                let dict = snapshot.value as! [String: Any]
                let date = dict["Date"] as! String
                let checkout = dict["Checkout"] as! String
                let checkin = dict["Checkin"] as! String
                dateEvent = date
                checkinEvent = checkin
                checkoutEvent = checkout
                view?.getDateTimeEventSuccess(keyEvent: keyEvent)
            } else {
                view?.getDateTimeEventFailed()
            }
        })
    }
    
    func removeEvent(keyEvent: String) {
        let placeRef = self.ref.child("Joiner/\(keyEvent)")
        placeRef.observeSingleEvent(of:.value, with: { [self] snapshot in
            if snapshot.exists()
            {
                view?.eventExistUser()
            } else {
                let placeRef = self.ref.child("Event/\(keyEvent)")
                placeRef.observeSingleEvent(of:.value, with: { [] snapshot in
                    if snapshot.exists()
                    {
                        placeRef.removeValue { [self] (error, snapshot) in
                            if error != nil {
                                view?.removeEventFailed()
                            } else {
                                view?.removeEventSuccess()
                                
                            }
                        }
                    }
                })
            }
        })
        

    }
    
    func fetchEvent() {
        infoEvent.removeAll()
        ref.child("Event").observeSingleEvent(of:.value) { [self] (snapshot) in
            if(snapshot.exists()) {
                for keyEvent in snapshot.children.allObjects as! [DataSnapshot] {
                    let placeRef = self.ref.child("Event/\(keyEvent.key)")
                    placeRef.observeSingleEvent(of:.value, with: { [self] snapshot in
                        if snapshot.exists()
                        {
                            let dict = snapshot.value as! [String: Any]
                            let title = dict["Title"] as! String
                            let date = dict["Date"] as! String
                            let checkin = dict["Checkin"] as! String
                            let checkout = dict["Checkout"] as! String
                            let key = dict["Key"] as! String
                            let type = dict["Type"] as! String
                            let urrlImage = dict["ImagePortal"] as! String
                            let request = Event(title: title, key: key, date: date, checkout: checkout, checkin: checkin, type: type, urlImage: urrlImage, stateLike: false)
                            infoEvent.append(request)
                            //infoEvent.insert(request, at: 0)
                            view?.fetchEventSuccess()
                        }
                        else
                        {
                            view?.fetchEventFailed()
                        }
                    })
                    
                }
            } else {
                view?.fetchEventFailed()
            }
        }
    }
    
    func fetchEventResult(keySearch: String) {
        infoEvent.removeAll()
        ref.child("Event").observeSingleEvent(of:.value) { [self] snapshot in
            if (snapshot.exists()) {
                for keyEvent in snapshot.children.allObjects as! [DataSnapshot] {
                    let placeRef = self.ref.child("Event/\(keyEvent.key)")
                    placeRef.observeSingleEvent(of:.value, with: { [self] snapshot in
                        if snapshot.exists()
                        {
                            let dict = snapshot.value as! [String: Any]
                            let title = dict["Title"] as! String
                            let date = dict["Date"] as! String
                            let checkin = dict["Checkin"] as! String
                            let checkout = dict["Checkout"] as! String
                            let key = dict["Key"] as! String
                            let type = dict["Type"] as! String
                            let urrlImage = dict["ImagePortal"] as! String

                            let request = Event(title: title, key: key, date: date, checkout: checkout, checkin: checkin, type: type, urlImage: urrlImage, stateLike: false)
                             
                            if  title.lowercased().contains(keySearch) || date.lowercased().contains(keySearch) || checkin.lowercased().contains(keySearch) || checkout.lowercased().contains(keySearch){
                                //infoEvent.insert(request, at: 0)
                                infoEvent.append(request)
                                view?.fetchEventSearchSuccess()
                            } else {
                                view?.fetchEventSearchFailed()
                            }
                            
                        }
                        else
                        {
                            view?.fetchEventSearchFailed()
                        }
                    })
                }
            } else {
                view?.fetchEventSearchFailed()
            }

        }
    }
}
