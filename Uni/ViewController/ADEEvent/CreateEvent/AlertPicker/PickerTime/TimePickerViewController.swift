//
//  TimePickerViewController.swift
//  Uni
//
//  Created nguyen gia huy on 23/11/2020.
//  Copyright Â© 2020 ___ORGANIZATIONNAME___. All rights reserved.
//
//  Template generated by Edward
//

import UIKit

class TimePickerViewController: BaseViewController, TimePickerViewProtocol {

	var presenter: TimePickerPresenterProtocol

    @IBOutlet weak var lbTimeCheckIn: UILabel!
    @IBOutlet weak var lbTimeCheckOut: UILabel!
    @IBOutlet weak var TimeInPicker: UIDatePicker!
    @IBOutlet weak var TimeOutPicker: UIDatePicker!
    var dataTimePicker: (()->Void)? = nil
    var timePick = ""
    var dateCheckin = "Check-in" {
        didSet {
            print(dateCheckin)
        }
    }
    var dateCheckout = "Check-out" {
        didSet {
            print(dateCheckout)
        }
    }
	init(presenter: TimePickerPresenterProtocol) {
        self.presenter = presenter
        super.init(nibName: "TimePickerViewController", bundle: nil)
    }

    required init?(coder aDecoder: NSCoder) {
        fatalError("init(coder:) has not been implemented")
    }

	override func viewDidLoad() {
        super.viewDidLoad()
        presenter.view = self
        presenter.viewDidLoad()
        if timePick == getCurrentDate() {
            TimeInPicker.minimumDate = Date() + 1
            TimeOutPicker.minimumDate = Date() + 1
        }
        setupUI()
        TimeInPicker.setDate(dateCheckin.toDateTime(), animated: true)
        TimeOutPicker.setDate(dateCheckout.toDateTime(), animated: true)
    }
    
    func setupUI(){
        lbTimeCheckIn.textColor = AppColor.YellowFAB32A
        lbTimeCheckOut.textColor = AppColor.YellowFAB32A
        view.backgroundColor = AppColor.ColorPresentView
    }
    
    @IBAction func PickerTimeIn(_ sender: Any) {
        lbTimeCheckIn.text = currentPickerTime(pickerTime: TimeInPicker)
    }
    
    @IBAction func PickerTimeOut(_ sender: Any) {
        lbTimeCheckOut.text = currentPickerTime(pickerTime: TimeOutPicker)
    }
    
    @IBAction func okPickerTime(_ sender: Any) {
 
        dateCheckin = currentPickerTime(pickerTime: TimeInPicker)
        dateCheckout = currentPickerTime(pickerTime: TimeOutPicker)
        if dateCheckin == dateCheckout {
            showAlert(title: "An Error", message: "The time check-in cannot be equal to the time check-out", actionTitles: ["OK"], style: [.default], actions: [.none])
        } else {
             dataTimePicker?()
             dismiss(animated: false, completion: nil)
        }
       
    }
    @IBAction func cancelPickerTime(_ sender: Any) {
        dismiss(animated: false, completion: nil)
    }
    
}
