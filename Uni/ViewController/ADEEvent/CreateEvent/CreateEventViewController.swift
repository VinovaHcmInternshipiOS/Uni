//
//  CreateEventViewController.swift
//  Uni
//
//  Created nguyen gia huy on 19/11/2020.
//  Copyright Â© 2020 ___ORGANIZATIONNAME___. All rights reserved.
//
//  Template generated by Edward
//

import UIKit

class CreateEventViewController: BaseViewController {
    @IBOutlet weak var imgLandscape: UIImageView!
    @IBOutlet weak var imgPortal: UIImageView!
    @IBOutlet weak var btImgLandscape: UIButton!
    @IBOutlet weak var btImgPortal: UIButton!
    @IBOutlet weak var contentTitle: UIView!
    @IBOutlet weak var contentOverview: UIView!
    @IBOutlet weak var contentLocation: UIView!
    @IBOutlet weak var btChooseDate: UIButton!
    @IBOutlet weak var btCheckin: UIButton!
    @IBOutlet weak var btCheckout: UIButton!
    @IBOutlet weak var btScore: UIButton!
    @IBOutlet weak var btDone: UIButton!
    var pickerDate: UIDatePicker?
	var presenter: CreateEventPresenterProtocol
    var imagePicker: ImagePicker!
	init(presenter: CreateEventPresenterProtocol) {
        self.presenter = presenter
        super.init(nibName: "CreateEventViewController", bundle: nil)
    }

    required init?(coder aDecoder: NSCoder) {
        fatalError("init(coder:) has not been implemented")
    }

	override func viewDidLoad() {
        super.viewDidLoad()

        presenter.view = self
        setupUI()
    }
    func datePickerView()
    {
        
        self.pickerDate = UIDatePicker()
        pickerDate?.datePickerMode = .date
        pickerDate?.addTarget(self, action: #selector(dateChanged(datePicker:)), for: .valueChanged)
        
    }
    @objc func dateChanged(datePicker: UIDatePicker){//format date
        btChooseDate.setTitle(getFormattedDate(date: "\(pickerDate!.date)"), for: .normal)
        // view.endEditing(true)
    }
    
    func setupUI(){
        self.imagePicker = ImagePicker(presentationController: self, delegate: self)
    }
    
    @IBAction func btImgPortal(_ sender: UIButton) {
        sender.animationScale()
        imagePicker.present(from: sender,type: .Portal)
    }
    
    @IBAction func btImgLandscape(_ sender: UIButton) {
        sender.animationScale()
        imagePicker.present(from: sender,type: .Landscape)
    }
    
    @IBAction func btChooseDate(_ sender: Any) {
    }

    
    @IBAction func btCheckin(_ sender: Any) {
        
    }
    
    @IBAction func btCheckout(_ sender: Any) {
        
    }
    
    @IBAction func btDone(_ sender: Any) {
        showSpinner()
        presenter.createEvent(urlImgLanscape: "", urlImgPortal: "", title: "test", overview: "test", location: "test", date: "20-11-2020", checkin: "11:00", checkout: "15:00", score: 0)
    }
    
}
extension CreateEventViewController: ImagePickerDelegate {
    func didSelect(image: UIImage?, type: typeImage) {
        switch type {
        case .Landscape:
            imgLandscape.image = image
            imgPortal.layer.borderWidth = 1
            imgPortal.layer.borderColor = AppColor.YellowFAB32A.cgColor
        case .Portal:
            imgPortal.image = image
            
        }
    }

}

extension CreateEventViewController: CreateEventViewProtocol {
    func uploadImageLandscapeSuccess(keyRef: String, pathEvent: String) {
        presenter.updateImageEvent(keyRef: keyRef, path: pathEvent, type: .Landscape)
        removeSpinner()
    }
    
    func uploadImagePortalSuccess(keyRef: String, pathEvent: String) {
        presenter.updateImageEvent(keyRef: keyRef, path: pathEvent, type: .Portal)
        removeSpinner()
    }
    
    func uploadImageLandscapeFailed() {
        print("Upload image lanscape failed")
        removeSpinner()
    }
    
    func uploadImagePortalFailed() {
        print("Upload image portal failed")
        removeSpinner()
    }
    
    func createEventSuccess(path: String) {
        if let imageLanscape = imgLandscape.image, let imagePortal = imgPortal.image{
            presenter.uploadImage(images: [imageLanscape,imagePortal],path: path)
        } else {return}
        
    }
    
    func createEventFailed() {
        print("Create event failed")
        removeSpinner()
    }
    
    
}
