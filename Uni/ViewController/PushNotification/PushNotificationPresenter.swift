//
//  PushNotificationPresenter.swift
//  Uni
//
//  Created nguyen gia huy on 11/12/2020.
//  Copyright Â© 2020 ___ORGANIZATIONNAME___. All rights reserved.
//
//  Template generated by Edward
//
import UIKit
import Foundation
import FirebaseMessaging
import UserNotifications
import FirebaseAuth
import FirebaseDatabase
import Firebase
// MARK: View -
protocol PushNotificationViewProtocol: class {
    func pushNotificationSuccess()
    func pushNotificationFailed()
    func createNotificationSuccess()
    func createNotificationFailed()
}

// MARK: Presenter -
protocol PushNotificationPresenterProtocol: class {
	var view: PushNotificationViewProtocol? { get set }
    func sendPushNotification(to token: String, title: String, body: String)
    func createNotification(title: String, content: String, date:String)
}

class PushNotificationPresenter: PushNotificationPresenterProtocol {

    weak var view: PushNotificationViewProtocol?
    var ref = Database.database().reference()
    var databaseHandle = DatabaseHandle()
    func sendPushNotification(to token: String, title: String, body: String) {
        let urlString = "https://fcm.googleapis.com/fcm/send"
        let url = NSURL(string: urlString)!
        let paramString: [String : Any] = ["condition": "'notify' in topics",
                                           "priority" : "high",
                                           "notification" : [
                                             "body" : body,
                                             "title" : title,
                                             "sound" : "default"
                                           ]
        ]
        let request = NSMutableURLRequest(url: url as URL)
        request.httpMethod = "POST"
        request.httpBody = try? JSONSerialization.data(withJSONObject:paramString, options: [.prettyPrinted])
        request.setValue("application/json", forHTTPHeaderField: "Content-Type")
        request.setValue(AppKey.keyPushNotification, forHTTPHeaderField: "Authorization")
        let task =  URLSession.shared.dataTask(with: request as URLRequest)  {  (data, response, error) in
            do {
                if let jsonData = data {
                    if let jsonDataDict  = try JSONSerialization.jsonObject(with: jsonData, options: JSONSerialization.ReadingOptions.allowFragments) as? [String: AnyObject] {
                        
                        NSLog("Received data:\n\(jsonDataDict))")
                        DispatchQueue.main.async { [self] in
                            view?.pushNotificationSuccess()
                        }
                    }
                }
            } catch let err as NSError {
                DispatchQueue.main.async { [self] in
                    view?.pushNotificationFailed()
                }
                
                print(err.debugDescription)
            }
        }
        task.resume()
    }
    
    func createNotification(title: String, content: String, date:String) {
        let path = self.ref.child("Notification").childByAutoId()
        let sentValue = ["Title":"\(title)","Content":"\(content)","Date":"\(date)"] as [String : Any]
        path.setValue(sentValue) { [self]
            (error:Error?, ref:DatabaseReference) in
            if error != nil {
                view?.createNotificationFailed()
            }
            else
            {
                view?.createNotificationSuccess()
            }
        }
    }

    
}
