//
//  DetailAccountPresenter.swift
//  Uni
//
//  Created nguyen gia huy on 03/12/2020.
//  Copyright Â© 2020 ___ORGANIZATIONNAME___. All rights reserved.
//
//  Template generated by Edward
//

import Foundation
import FirebaseAuth
import FirebaseDatabase
import Firebase

// MARK: View -
protocol DetailAccountViewProtocol: class {
    func fetchDetailAccountSuccess()
    func fetchDetailAccountFailed()
    func changeStateUserSuccess()
    func changeStateUserFailed()
}

// MARK: Presenter -
protocol DetailAccountPresenterProtocol: class {
	var view: DetailAccountViewProtocol? { get set }
    var detailAccount: DetailAccount? {get set}
    func fetchDetailAccount(uid:String)
    func changeStateUser(state: Bool, keyUser: String)
    
}

class DetailAccountPresenter: DetailAccountPresenterProtocol {

    weak var view: DetailAccountViewProtocol?
    var ref = Database.database().reference()
    var databaseHandle = DatabaseHandle()
    var user = Auth.auth().currentUser
    var detailAccount: DetailAccount?
    
    func fetchDetailAccount(uid: String) {
        let placeRef = self.ref.child("Users/\(uid)")
        placeRef.observe(.value, with: { [self] snapshot in
            if snapshot.exists()
            {
                let dict = snapshot.value as! [String: Any]
                let code = dict["Code"] as! String
                let email   = dict["Email"] as! String
                let placeRef = self.ref.child("Users/\(uid)/Auth")
                placeRef.observe(.value, with: { [self] snapshot in
                    if snapshot.exists()
                    {
                        let dict = snapshot.value as! [String: Any]
                        let role = dict["Role"] as! String
                        let state   = dict["State"] as! Bool
                        //"\(user.metadata.creationDate ?? Date())"
                        //"\(user.metadata.lastSignInDate ?? Date())"
                        detailAccount = DetailAccount(created: "", signedin: "", state: state, uid: uid, id: code, email: email, role: role)
                        view?.fetchDetailAccountSuccess()
                    } else {
                        view?.fetchDetailAccountFailed()
                    }
                })
            }
            else {
                view?.fetchDetailAccountFailed()
            }
        })
    }
    
    func changeStateUser(state: Bool, keyUser: String) {
        let stateUser = ["Users/\(keyUser)/Auth/State":state] as [String : Any]
        ref.updateChildValues(stateUser as [AnyHashable : Any]) { [self] (error, snapshot) in
            if error != nil {
                view?.changeStateUserFailed()
            } else {
                view?.changeStateUserSuccess()
            }
        }
    }


}
