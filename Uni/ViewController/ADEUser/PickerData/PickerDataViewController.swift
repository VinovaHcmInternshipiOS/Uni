//
//  PickerDataViewController.swift
//  Uni
//
//  Created nguyen gia huy on 02/12/2020.
//  Copyright Â© 2020 ___ORGANIZATIONNAME___. All rights reserved.
//
//  Template generated by Edward
//

import UIKit

class PickerDataViewController: UIViewController, PickerDataViewProtocol{
    
    @IBOutlet weak var pickerView: UIPickerView!
    @IBOutlet weak var lbCurrent: UILabel!
    var presenter: PickerDataPresenterProtocol
    var dataPickerRole: (()->Void)? = nil
    var dataPickerState: (()->Void)? = nil
    var dataPickerGender: (()->Void)? = nil
    var dataPickerClass: (()->Void)? = nil
    var dataPickerCourse: (()->Void)? = nil
    var dataPickerFaculty: (()->Void)? = nil
    var pickerRole = [String]()
    var pickerState = [String]()
    var pickerGender = [String]()
    var pickerClass = [String]()
    var pickerCourse = [String]()
    var pickerFaculty = [String]()
    var Role = false
    var State = false
    var Gender = false
    var Class = false
    var Course = false
    var Faculty = false
    init(presenter: PickerDataPresenterProtocol) {
        self.presenter = presenter
        super.init(nibName: "PickerDataViewController", bundle: nil)
    }
    
    required init?(coder aDecoder: NSCoder) {
        fatalError("init(coder:) has not been implemented")
    }
    
    override func viewDidLoad() {
        super.viewDidLoad()
        presenter.view = self
        addData()
        checkView()
        pickerView.dataSource = self
        pickerView.delegate = self
    }
    func addData(){
        let date = Date()
        let calendar = Calendar.current
        let year = calendar.component(.year, from: date)
        let arrayClass = ["KQ","KT","LK","TA","TH","TN","QT"]
        for i in 0..<arrayClass.count{
            for m in 01...10 {
                for n in 17...year - 2000 {
                    pickerClass.append("\(n)D1\(arrayClass[i])\(m)")
                    pickerClass.sort(by: {$0 > $1})
                }
            }
        }
        
        for n in 2015...year {
            pickerCourse.append("\(n) - \(n+4)")
            pickerCourse.sort(by: {$0 > $1})
        }
        
       
        
    }
    
    func checkView(){
        if Role == true {
            pickerRole = [AppLanguage.Admin.localized,AppLanguage.User.localized]
            lbCurrent.text = pickerRole[0]
        } else if State == true{
            pickerState = [AppLanguage.True.localized,AppLanguage.False.localized]
            lbCurrent.text = pickerState[0]
        } else if Gender == true{
            pickerGender = [AppLanguage.Male.localized,AppLanguage.Female.localized]
            lbCurrent.text = pickerGender[0]
        } else if Class == true{
            lbCurrent.text = pickerClass[0]
        } else if Course == true{
            lbCurrent.text = pickerCourse[0]
        } else {
            pickerFaculty = [AppLanguage.CreateUser.BA.localized,AppLanguage.CreateUser.AF.localized,AppLanguage.CreateUser.ISC.localized,AppLanguage.CreateUser.LIC.localized,AppLanguage.CreateUser.LAW.localized,AppLanguage.CreateUser.HMT.localized,AppLanguage.CreateUser.IRC.localized]
            lbCurrent.text = pickerFaculty[0]
        }
    }
    @IBAction func btOK(_ sender: Any) {
        if Role == true {
            dataPickerRole?()
        } else if State == true{
            dataPickerState?()
        } else if Gender == true{
            dataPickerGender?()
        } else if Class == true{
            dataPickerClass?()
        } else if Course == true{
            dataPickerCourse?()
        } else {
            dataPickerFaculty?()
        }
        dismiss(animated: false, completion: nil)
    }
    @IBAction func btCancel(_ sender: Any) {
        dismiss(animated: true, completion: nil)
    }
    
}

extension PickerDataViewController: UIPickerViewDelegate, UIPickerViewDataSource {
    func numberOfComponents(in pickerView: UIPickerView) -> Int {
        return 1
    }
    
    func pickerView( _ pickerView: UIPickerView, numberOfRowsInComponent component: Int) -> Int {
        if Role == true {
            return pickerRole.count
        } else if State == true{
            return pickerState.count
        } else if Gender == true{
            return pickerGender.count
        } else if Class == true{
            return pickerClass.count
        } else if Course == true{
            return pickerCourse.count
        } else {
            return pickerFaculty.count
        }
        
        
    }
    
    func pickerView( _ pickerView: UIPickerView, titleForRow row: Int, forComponent component: Int) -> String? {
        if Role == true {
            return pickerRole[row]
        } else if State == true{
            return pickerState[row]
        } else if Gender == true{
            return pickerGender[row]
        } else if Class == true{
            return pickerClass[row]
        } else if Course == true{
            return pickerCourse[row]
        } else {
            return pickerFaculty[row]
        }
    }
    func pickerView(_ pickerView: UIPickerView, didSelectRow row: Int, inComponent component: Int) {
        if Role == true {
            lbCurrent.text = pickerRole[row]
        } else if State == true{
            lbCurrent.text = pickerState[row]
        } else if Gender == true{
            lbCurrent.text = pickerGender[row]
        } else if Class == true{
            lbCurrent.text = pickerClass[row]
        } else if Course == true{
            lbCurrent.text = pickerCourse[row]
        } else {
            lbCurrent.text = pickerFaculty[row]
        }
        
    }
}
