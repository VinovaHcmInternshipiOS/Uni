//
//  ListUserViewController.swift
//  Uni
//
//  Created nguyen gia huy on 01/12/2020.
//  Copyright Â© 2020 ___ORGANIZATIONNAME___. All rights reserved.
//
//  Template generated by Edward
//

import UIKit
import CRRefresh
class ListUserViewController: BaseViewController {
    
    @IBOutlet weak var viewPlus: UIView!
    @IBOutlet weak var btPlus: UIButton!
    @IBOutlet weak var scrollView: UIScrollView!
    @IBOutlet weak var heightCollectionView: NSLayoutConstraint!
    @IBOutlet weak var lbListUser: UILabel!
    @IBOutlet weak var collectionView: UICollectionView!
    var getkeySearch: (()->Void)? = nil
    var listUser = [ListUser?]()
    var presenter: ListUserPresenterProtocol
    var stateActionHandler: ((UIAlertAction) -> Void)? = nil
    var cancelActionHandler: ((UIAlertAction) -> Void)? = nil
    private var pullControl = UIRefreshControl()
    init(presenter: ListUserPresenterProtocol) {
        self.presenter = presenter
        super.init(nibName: "ListUserViewController", bundle: nil)
    }
    
    required init?(coder aDecoder: NSCoder) {
        fatalError("init(coder:) has not been implemented")
    }
    
    override func viewDidLoad() {
        super.viewDidLoad()
        
        presenter.view = self
        setupUI()
        setupLanguage()
        presenter.fetchListUser()
        pullRefreshData()

        
    }
    
    func setupLanguage(){
        lbListUser.text = AppLanguage.ListUser.ListUser.localized
    }
    
    func setupUI() {
        collectionView.delegate = self
        collectionView.dataSource = self
        collectionView.register(UINib(nibName: "ListUserCell", bundle: nil), forCellWithReuseIdentifier: "ListUserCell")
        collectionView.register(UINib(nibName: "HeaderSearch", bundle: nil), forSupplementaryViewOfKind: UICollectionView.elementKindSectionHeader, withReuseIdentifier: "HeaderSearch")
        
        collectionView.register(UINib(nibName: "HeaderSearch", bundle: nil), forSupplementaryViewOfKind: UICollectionView.elementKindSectionFooter, withReuseIdentifier: "HeaderSearch")
        viewPlus.shadowColor = AppColor.YellowShadow
        btPlus.setTitleColor(AppColor.YellowFAB32A, for: .normal)
        pullControl.tintColor = AppColor.YellowFAB32A
        btPlus.setImage(AppIcon.icPlusYellow, for: .normal)
    }
    func refreshListUser(){
        presenter.infoUsers = []
        presenter.fetchListUser()
    }
    @objc func pulledRefreshControl(sender:AnyObject) {
        pullControl.endRefreshing()
        refreshListUser()
    }
    
    private func pullRefreshData() {
        pullControl.addTarget(self, action: #selector(pulledRefreshControl), for: UIControl.Event.valueChanged)
        scrollView.alwaysBounceVertical = true
        scrollView.addSubview(pullControl)

    }
    
    @objc func actionSearch(sender: UIButton) {
        getkeySearch?()
    }
    
    @IBAction func addUser(_ sender: Any) {
        let createUser = CreateUserViewController(presenter: CreateUserPresenter())
        navigationController?.pushViewController(createUser, animated: true)
        createUser.refreshListUser = { [self] in
            refreshListUser()
        }
    }
    
}
extension ListUserViewController: UICollectionViewDelegateFlowLayout,UICollectionViewDelegate {
    
    func collectionView(_ collectionView: UICollectionView, layout collectionViewLayout: UICollectionViewLayout, sizeForItemAt indexPath: IndexPath) -> CGSize {
        return CGSize(width: collectionView.frame.width / 2 - 10, height: 170 )
    }
    
    func collectionView(_ collectionView: UICollectionView, viewForSupplementaryElementOfKind kind: String, at indexPath: IndexPath) -> UICollectionReusableView {
        switch kind {
        
        case UICollectionView.elementKindSectionHeader:
            
            if let headerView = collectionView.dequeueReusableSupplementaryView(ofKind: kind, withReuseIdentifier: "HeaderSearch", for: indexPath) as? HeaderSearch {
                headerView.lbTotal.text = AppLanguage.ListAttendance.Total.localized + " \(listUser.count)"
                headerView.lbTotal.isHidden = false
                headerView.txtSearch.placeholder = AppLanguage.SearchEvent.Search.localized
                headerView.backgroundColor = .none
                getkeySearch = { [self] in
                    if let keysearch = headerView.txtSearch.text {
                        presenter.fetchUsersResult(keyUser: keysearch)
                    } else {return}

                }
                headerView.btSearch.addTarget(self, action: #selector(actionSearch(sender:)), for: .touchUpInside)
                
                
                return headerView
            } else {
                return UICollectionReusableView()
            }
            
        case UICollectionView.elementKindSectionFooter:
            let headerView = collectionView.dequeueReusableSupplementaryView(ofKind: kind, withReuseIdentifier: "HeaderSearch", for: indexPath)
            
            return headerView
            
        default:
            
            assert(false, "Unexpected element kind")
        }
    }
    
    func collectionView(_ collectionView: UICollectionView, layout collectionViewLayout: UICollectionViewLayout, minimumLineSpacingForSectionAt section: Int) -> CGFloat {
        return 0.000000
    }
    
    func collectionView(_ collectionView: UICollectionView, layout collectionViewLayout: UICollectionViewLayout, minimumInteritemSpacingForSectionAt section: Int) -> CGFloat {
        return 0.0000000
    }
    
    func collectionView(_ collectionView: UICollectionView, layout collectionViewLayout: UICollectionViewLayout, referenceSizeForHeaderInSection section: Int) -> CGSize {
        return CGSize(width: collectionView.frame.width, height: 118 )
    }
    
    func collectionView(_ collectionView: UICollectionView, layout collectionViewLayout: UICollectionViewLayout, referenceSizeForFooterInSection section: Int) -> CGSize {
        return CGSize(width: 0, height: 0)
    }
    
}

extension ListUserViewController: UICollectionViewDataSource {
    func collectionView(_ collectionView: UICollectionView, willDisplay cell: UICollectionViewCell, forItemAt indexPath: IndexPath) {
        self.collectionView.layoutIfNeeded()
        self.heightCollectionView.constant = self.collectionView.contentSize.height
    }
    
    func numberOfSections(in collectionView: UICollectionView) -> Int {
        return 1
    }
    
    func collectionView(_ collectionView: UICollectionView, numberOfItemsInSection section: Int) -> Int {
        return listUser.count
    }
    
    func collectionView(_ collectionView: UICollectionView, didSelectItemAt indexPath: IndexPath) {
        let detailAccount = DetailAccountViewController(presenter: DetailAccountPresenter())
        if let uid = listUser[indexPath.row]?.uid {
            detailAccount.keyUID = uid
            navigationController?.pushViewController(detailAccount, animated: true)
        } else {return}
        detailAccount.refreshListUser = { [self] in
            refreshListUser()
        }
    }
    func collectionView(_ collectionView: UICollectionView, cellForItemAt indexPath: IndexPath) -> UICollectionViewCell {
        if let cell = collectionView.dequeueReusableCell(withReuseIdentifier: "ListUserCell", for: indexPath) as? ListUserCell {
            cell.lbEmail.text = listUser[indexPath.row]?.email
            cell.lbID.text = listUser[indexPath.row]?.code
            if listUser[indexPath.row]?.state == true {
                cell.viewState.backgroundColor = .systemGreen
                cell.btState.setTitle(AppLanguage.Disable.localized, for: .normal)
                cell.btState.setTitleColor(.systemRed, for: .normal)
            } else {
                cell.viewState.backgroundColor = .systemRed
                cell.btState.setTitle(AppLanguage.Enable.localized, for: .normal)
                cell.btState.setTitleColor(.systemGreen, for: .normal)
            }
            return cell
        }
        else {
            return UICollectionViewCell()
        }
    }
    
    
}

extension ListUserViewController: ListUserViewProtocol{
    func fetchUserSearchSuccess() {
        listUser = presenter.infoUsers
        collectionView.reloadData()
    }
    
    func fetchUserSearchFailed() {
        print("search user failed")
    }
    
    func changeStateUserSuccess() {
        presenter.infoUsers = []
        presenter.fetchListUser()
       print("Success")
    }
    
    func changeStateUserFailed() {
        print("change state user failed")
    }
    
    func fetchUserSuccess() {
        listUser = presenter.infoUsers
        collectionView.reloadData()
    }
    
    func fetchUserFailed() {
        print("fetch list user failed")
    }
    
    
}
