//
//  CreateUserViewController.swift
//  Uni
//
//  Created nguyen gia huy on 01/12/2020.
//  Copyright Â© 2020 ___ORGANIZATIONNAME___. All rights reserved.
//
//  Template generated by Edward
//

import UIKit

class CreateUserViewController: BaseViewController {
    
    @IBOutlet weak var txtGender: UILabel!
    @IBOutlet weak var txtClass: UILabel!
    @IBOutlet weak var txtCourse: UILabel!
    @IBOutlet weak var txtFaculty: UILabel!
    @IBOutlet weak var txtName: UITextField!
    @IBOutlet weak var txtState: UILabel!
    @IBOutlet weak var txtRole: UILabel!
    @IBOutlet weak var txtID: UITextField!
    @IBOutlet weak var txtEmail: UITextField!
    @IBOutlet weak var viewFaculty: UIView!
    @IBOutlet weak var viewCourse: UIView!
    @IBOutlet weak var viewClass: UIView!
    @IBOutlet weak var viewGender: UIView!
    @IBOutlet weak var viewName: UIView!
    @IBOutlet weak var viewState: UIView!
    @IBOutlet weak var viewRole: UIView!
    @IBOutlet weak var viewID: UIView!
    @IBOutlet weak var viewEmail: UIView!
    @IBOutlet weak var lbCreateUser: UILabel!
    @IBOutlet weak var lbAccount: UILabel!
    @IBOutlet weak var lbEmail: UILabel!
    @IBOutlet weak var lbID: UILabel!
    @IBOutlet weak var lbState: UILabel!
    @IBOutlet weak var lbRole: UILabel!
    @IBOutlet weak var lbInformation: UILabel!
    @IBOutlet weak var lbName: UILabel!
    @IBOutlet weak var lbGender: UILabel!
    @IBOutlet weak var lbClass: UILabel!
    @IBOutlet weak var lbCourse: UILabel!
    @IBOutlet weak var lbFaculty: UILabel!
    @IBOutlet weak var btDone: UIButton!
    
    var presenter: CreateUserPresenterProtocol
    var refreshListUser: (()->Void)? = nil
    var okActionHandler: ((UIAlertAction) -> Void)? = nil
    init(presenter: CreateUserPresenterProtocol) {
        self.presenter = presenter
        super.init(nibName: "CreateUserViewController", bundle: nil)
    }
    
    required init?(coder aDecoder: NSCoder) {
        fatalError("init(coder:) has not been implemented")
    }
    
    override func viewDidLoad() {
        super.viewDidLoad()
        presenter.view = self
        setupLanguage()
        setupUI()
        pickerTextfield()
        
    }
    
    func setupLanguage(){
        lbCreateUser.text = AppLanguage.CreateUser.CreateUser.localized
        lbAccount.text = AppLanguage.CreateUser.Account.localized
        lbRole.text = AppLanguage.CreateUser.Role.localized
        lbState.text = AppLanguage.CreateUser.State.localized
        lbInformation.text = AppLanguage.CreateUser.Information.localized
        lbName.text = AppLanguage.CreateUser.Name.localized
        lbGender.text = AppLanguage.CreateUser.Gender.localized
        lbClass.text = AppLanguage.CreateUser.Class.localized
        lbCourse.text = AppLanguage.CreateUser.Course.localized
        lbFaculty.text = AppLanguage.CreateUser.Faculty.localized
        btDone.setTitle(AppLanguage.CreateUser.Done.localized, for: .normal)
        
        txtEmail.placeholder = AppLanguage.CreateUser.placeHolderEmail.localized
        txtID.placeholder = AppLanguage.CreateUser.placeHolderID.localized
        txtRole.text = AppLanguage.CreateUser.placeHolderRole.localized
        txtState.text = AppLanguage.CreateUser.placeHolderState.localized
        txtName.placeholder = AppLanguage.CreateUser.placeHolderName.localized
        txtGender.text = AppLanguage.CreateUser.placeHolderGender.localized
        txtClass.text = AppLanguage.CreateUser.placeHolderClass.localized
        txtCourse.text = AppLanguage.CreateUser.placeHolderCourse.localized
        txtFaculty.text = AppLanguage.CreateUser.placeHolderFaculty.localized
        
    }
    
    func setupUI(){
        btDone.backgroundColor = AppColor.YellowFAB32A
        btDone.shadowColor = AppColor.YellowShadow
        
        viewEmail.backgroundColor = AppColor.YellowFBC459
        viewID.backgroundColor = AppColor.YellowFBC459
        viewRole.backgroundColor = AppColor.YellowFBC459
        viewState.backgroundColor = AppColor.YellowFBC459
        viewName.backgroundColor = AppColor.YellowFBC459
        viewGender.backgroundColor = AppColor.YellowFBC459
        viewClass.backgroundColor = AppColor.YellowFBC459
        viewCourse.backgroundColor = AppColor.YellowFBC459
        viewFaculty.backgroundColor = AppColor.YellowFBC459
    }
    
    func pickerTextfield(){
        let gestureRole:UITapGestureRecognizer = UITapGestureRecognizer(target: self, action: #selector(pickerDataRole))
        txtRole.isUserInteractionEnabled = true
        txtRole.addGestureRecognizer(gestureRole)
        
        let gestureState:UITapGestureRecognizer = UITapGestureRecognizer(target: self, action: #selector(pickerDataState))
        txtState.isUserInteractionEnabled = true
        txtState.addGestureRecognizer(gestureState)
        
        let gestureGender:UITapGestureRecognizer = UITapGestureRecognizer(target: self, action: #selector(pickerDataGender))
        txtGender.isUserInteractionEnabled = true
        txtGender.addGestureRecognizer(gestureGender)
        
        let gestureClass:UITapGestureRecognizer = UITapGestureRecognizer(target: self, action: #selector(pickerDataClass))
        txtClass.isUserInteractionEnabled = true
        txtClass.addGestureRecognizer(gestureClass)
        
        let gestureCourse:UITapGestureRecognizer = UITapGestureRecognizer(target: self, action: #selector(pickerDataCourse))
        txtCourse.isUserInteractionEnabled = true
        txtCourse.addGestureRecognizer(gestureCourse)
        
        let gestureFaculty:UITapGestureRecognizer = UITapGestureRecognizer(target: self, action: #selector(pickerDataFaculty))
        txtFaculty.isUserInteractionEnabled = true
        txtFaculty.addGestureRecognizer(gestureFaculty)
        
        txtID.keyboardType = .numberPad
        
        
    }
    
    @objc func pickerDataRole(){
        let pickerData = PickerDataViewController(presenter: PickerDataPresenter())
        pickerData.modalPresentationStyle = .overCurrentContext
        pickerData.Role = true
        present(pickerData, animated: false, completion: nil)
        pickerData.dataPickerRole = { [self] in
            txtRole.text = pickerData.lbCurrent.text
        }
    }
    
    @objc func pickerDataState(){
        let pickerData = PickerDataViewController(presenter: PickerDataPresenter())
        pickerData.modalPresentationStyle = .overCurrentContext
        pickerData.State = true
        present(pickerData, animated: false, completion: nil)
        pickerData.dataPickerState = { [self] in
            txtState.text = pickerData.lbCurrent.text
        }
    }
    
    @objc func pickerDataGender(){
        let pickerData = PickerDataViewController(presenter: PickerDataPresenter())
        pickerData.modalPresentationStyle = .overCurrentContext
        pickerData.Gender = true
        present(pickerData, animated: false, completion: nil)
        pickerData.dataPickerGender = { [self] in
            txtGender.text = pickerData.lbCurrent.text
        }
    }
    
    @objc func pickerDataClass(){
        let pickerData = PickerDataViewController(presenter: PickerDataPresenter())
        pickerData.modalPresentationStyle = .overCurrentContext
        pickerData.Class = true
        present(pickerData, animated: false, completion: nil)
        pickerData.dataPickerClass = { [self] in
            txtClass.text = pickerData.lbCurrent.text
        }
    }
    
    @objc func pickerDataCourse(){
        let pickerData = PickerDataViewController(presenter: PickerDataPresenter())
        pickerData.modalPresentationStyle = .overCurrentContext
        pickerData.Course = true
        present(pickerData, animated: false, completion: nil)
        pickerData.dataPickerCourse = { [self] in
            txtCourse.text = pickerData.lbCurrent.text
        }
    }
    
    @objc func pickerDataFaculty(){
        let pickerData = PickerDataViewController(presenter: PickerDataPresenter())
        pickerData.modalPresentationStyle = .overCurrentContext
        pickerData.Faculty = true
        present(pickerData, animated: false, completion: nil)
        pickerData.dataPickerFaculty = { [self] in
            txtFaculty.text = pickerData.lbCurrent.text
        }
    }
    
    func dataFaculty() -> String {
        if var faculty = txtFaculty.text {
            switch faculty {
            case AppLanguage.CreateUser.AF.localized:
                faculty = AppLanguage.CreateUser.AF
            case AppLanguage.CreateUser.BA.localized:
                faculty = AppLanguage.CreateUser.BA
            case AppLanguage.CreateUser.HMT.localized:
                faculty = AppLanguage.CreateUser.HMT
            case AppLanguage.CreateUser.IRC.localized:
                faculty = AppLanguage.CreateUser.IRC
            case AppLanguage.CreateUser.ISC.localized:
                faculty = AppLanguage.CreateUser.ISC
            case AppLanguage.CreateUser.LAW.localized:
                faculty = AppLanguage.CreateUser.LAW
            default:
                faculty = AppLanguage.CreateUser.LIC
            }
            return faculty
        }
        else {return ""}
    }
    
    func dataGender()-> String {
        if var gender = txtGender.text {
            switch gender {
            case AppLanguage.Female.localized:
                gender = AppLanguage.Female
            default:
                gender = AppLanguage.Male
            }
            return gender
        } else {return ""}
    }
    
    func dataRole()-> String {
        if var role = txtRole.text {
            switch role {
            case AppLanguage.Admin.localized:
                role = AppLanguage.Admin
            default:
                role = AppLanguage.User
            }
            return role
        } else {return ""}
    }
    
    func dataState()-> String {
        if var state = txtState.text {
            switch state {
            case AppLanguage.True.localized:
                state = AppLanguage.True
            default:
                state = AppLanguage.False
            }
            return state
        } else {return ""}
    }
    
    @IBAction func btCreate(_ sender: Any) {
        showSpinner()
        if let email = txtEmail.text, let id = txtID.text, let role = txtRole.text, let state = txtState.text,let name = txtName.text, let gender = txtGender.text, let Class = txtClass.text, let course = txtCourse.text, let faculty = txtFaculty.text {
            if removeWhiteSpaceAndLine(text: email) != "" && removeWhiteSpaceAndLine(text: id) != "" && removeWhiteSpaceAndLine(text: role) != "" && removeWhiteSpaceAndLine(text: state) != "" && removeWhiteSpaceAndLine(text: name) != "" && removeWhiteSpaceAndLine(text: gender) != "" && removeWhiteSpaceAndLine(text: Class) != "" && removeWhiteSpaceAndLine(text: course) != "" && removeWhiteSpaceAndLine(text: faculty) != "" {
                presenter.checkExistEmail(email: email)
                
            } else {
                showAlert(title: AppLanguage.HandleError.anError.localized, message: AppLanguage.HandleError.fillIn.localized, actionTitles: [AppLanguage.Ok.localized], style: [.default], actions: [.none])
            }
        } else {return}
        
    }
    func gotoListUserVC(){
        navigationController?.popViewController(animated: true)
        refreshListUser?()
    }
}

extension CreateUserViewController: CreateUserViewProtocol{
    func errorCreateAccount(error: Error) {
        removeSpinner()
        handleError(error)
    }
    
    func checkExistEmailSuccess() {
        removeSpinner()
        showAlert(title: AppLanguage.HandleError.anError.localized, message: AppLanguage.HandleError.emailAlreadyInUse.localized, actionTitles: [AppLanguage.Ok.localized], style: [.cancel], actions: [.none])
    }
    
    func checkExistEmailFailed() {
        if let code = txtID.text {
            presenter.checkExistID(code: removeWhiteSpaceAndLine(text: code))
        } else {return}
        
    }
    
    func checkExistIDSuccess() {
        removeSpinner()
        showAlert(title: AppLanguage.HandleError.anError.localized, message: AppLanguage.HandleError.idAlreadyInUse.localized, actionTitles: [AppLanguage.Ok.localized], style: [.cancel], actions: [.none])
    }
    
    func checkExistIDFailed() {
        if let email = txtEmail.text, let id = txtID.text, let _ = txtRole.text, let _ = txtState.text {
            presenter.createAccount(email: removeWhiteSpaceAndLine(text: email), id: removeWhiteSpaceAndLine(text: id), role: dataRole(), state: Bool(dataState()) ?? true,created: getCurrentDateTime24h())
        } else {return}
    }
    
    func createAccountSuccess(code: String) {
        if let name = txtName.text, let _ = txtGender.text, let Class = txtClass.text, let course = txtCourse.text, let _ = txtFaculty.text {
            presenter.createInformation(code: removeWhiteSpaceAndLine(text: code), name: removeWhiteSpaceAndLine(text: name), gender: dataGender(), Class: Class, course: course, faculty: dataFaculty())
        } else {return}
        
    }
    
    func createAccoutnFailed(error:Error) {
        removeSpinner()
        showAlert(title: AppLanguage.HandleError.anError.localized, message: AppLanguage.HandleError.createAccount.localized, actionTitles: [AppLanguage.Ok.localized], style: [.cancel], actions: [.none])
    }
    
    func createInformationSuccess() {
        removeSpinner()
        presentAlertWithTitle(title: AppLanguage.HandleSuccess.Success.localized, message: AppLanguage.HandleSuccess.createAccount.localized, options: AppLanguage.Ok.localized) { [self] (option) in
            gotoListUserVC()
        }
        
    }
    
    func createInformationFailed() {
        removeSpinner()
        print("create information failed")
    }
    
    
}
