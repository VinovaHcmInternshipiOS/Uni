//
//  ProfilePresenter.swift
//  Uni
//
//  Created nguyen gia huy on 19/11/2020.
//  Copyright Â© 2020 ___ORGANIZATIONNAME___. All rights reserved.
//
//  Template generated by Edward
//

import Foundation
import FirebaseAuth
import FirebaseDatabase
import Firebase
import FirebaseStorage
import UIKit

// MARK: View -
protocol ProfileViewProtocol: class {
    func fetchProfileSuccess()
    func fetchProfileFailed()
    func updateImageSuccess()
    func updateImageFailed()
    func fetchProfileAttendanceSuccess()
    func fetchProfileAttendanceFailed()
}

// MARK: Presenter -
protocol ProfilePresenterProtocol: class {
    var view: ProfileViewProtocol? { get set }
    var profileUser: Profile? { get set }
    func fetchProfile()
    func updateImage(image: UIImage)
    func fetchProfileAttendance(keyUser: String)
    
    
}

class ProfilePresenter: ProfilePresenterProtocol {
    
    
    weak var view: ProfileViewProtocol?
    var ref = Database.database().reference()
    var databaseHandle = DatabaseHandle()
    var user = Auth.auth().currentUser
    let storageRef = Storage.storage().reference()
    var profileUser: Profile?
    
    func fetchProfile() {
        guard let user = user else { return }
        let placeRef = self.ref.child("Users").child("\(user.uid)")
        placeRef.observe(.value, with: { [self] snapshot in
            if(snapshot.exists())
            {
                let placeDict = snapshot.value as! [String: Any]
                let code = placeDict["Code"] as! String
                let email = placeDict["Email"] as! String
                let placeRef = self.ref.child("Data").child("\(code)")
                placeRef.observe(.value, with: { [self] snapshot in
                    if(snapshot.exists())
                    {
                        let placeDict = snapshot.value as! [String: Any]
                        let name = placeDict["Name"] as! String
                        let gender = placeDict["Gender"] as! String
                        let classs = placeDict["Class"] as! String
                        let course = placeDict["Course"] as! String
                        let faculty = placeDict["Faculty"] as! String
                        let urlImage = placeDict["Image"] as! String
                        
                        profileUser = Profile(code: code, name: name, email: email, gender: gender, classs: classs, course: course, faculty: faculty, urlImage: urlImage)
                        view?.fetchProfileSuccess()
                        
                    }
                    else
                    {
                        view?.fetchProfileFailed()
                    }
                })
                
                
            }
            else
            {
                view?.fetchProfileFailed()
            }
        })
    }
    
    func updateImage(image: UIImage){
        guard let user = user else { return }
        let storedImage = storageRef.child("Users/\(user.uid)/\(image.hashValue)")
        if let uploadData = image.jpegData(compressionQuality: 1)
        {
            let metaData = StorageMetadata()
            metaData.contentType = "image/jpg"
            storedImage.putData(uploadData, metadata: metaData, completion: { [self]  (metadata, error) in
                if error != nil {
                    view?.updateImageFailed()
                } else {
                    
                    let placeRef = self.ref.child("Users").child("\(user.uid)")
                    placeRef.observe(.value, with: { [self] snapshot in
                        if(snapshot.exists())
                        {
                            let placeDict = snapshot.value as! [String: Any]
                            let code = placeDict["Code"] as! String
                            let imageData = ["Data/\(code)/Image":(storedImage.fullPath)] as [String : Any]
                            ref.updateChildValues(imageData as [AnyHashable : Any]) { (error, snapshot) in
                                if error != nil {
                                    view?.updateImageFailed()
                                } else {
                                    view?.updateImageSuccess()
                                    
                                }
                            }
                            
                        }
                        else {
                            view?.updateImageFailed()
                        }
                    })
                }
            })
        }
    }
    
    func fetchProfileAttendance(keyUser: String) {
        let placeRef = self.ref.child("Data").child("\(keyUser)")
        placeRef.observe(.value, with: { [self] snapshot in
            if(snapshot.exists())
            {
                let placeDict = snapshot.value as! [String: Any]
                let name = placeDict["Name"] as! String
                let gender = placeDict["Gender"] as! String
                let classs = placeDict["Class"] as! String
                let course = placeDict["Course"] as! String
                let faculty = placeDict["Faculty"] as! String
                let urlImage = placeDict["Image"] as! String
                let code = placeDict["Code"] as! String
                
                self.ref.child("Users").queryOrdered(byChild: "Email").queryStarting(atValue: "\(code)").queryEnding(atValue: "\(code)" + "\u{f8ff}").observeSingleEvent(of:.value) { [self] snapshot in
                    if (snapshot.exists()) {
                        for keyUser in snapshot.children.allObjects as! [DataSnapshot] {
                            let placeRef = self.ref.child("Users/\(keyUser.key)")
                            placeRef.observeSingleEvent(of:.value, with: { [self] snapshot in
                                if snapshot.exists()
                                {
                                    let dict = snapshot.value as! [String: Any]
                                    let email = dict["Email"] as! String
                                    print(email)
                                }
                                else
                                {
                                    
                                }
                            })
                        }
                    } else {
                        
                    }
                    
                }
                
                profileUser = Profile(code: keyUser, name: name, email: "", gender: gender, classs: classs, course: course, faculty: faculty, urlImage: urlImage)
                view?.fetchProfileAttendanceSuccess()
                
            }
            else
            {
                view?.fetchProfileAttendanceFailed()
            }
        })
    }
}
