//
//  ManageViewController.swift
//  Uni
//
//  Created nguyen gia huy on 01/12/2020.
//  Copyright Â© 2020 ___ORGANIZATIONNAME___. All rights reserved.
//
//  Template generated by Edward
//

import UIKit
import Firebase
import FirebaseMessaging
import UserNotifications

class ManageViewController: BaseViewController, ManageViewProtocol {

    @IBOutlet weak var heightCollectionView: NSLayoutConstraint!
    @IBOutlet weak var lbHi: UILabel!
    @IBOutlet weak var collectionView: UICollectionView!
    var presenter: ManagePresenterProtocol
    var listFunction = [String]()

	init(presenter: ManagePresenterProtocol) {
        self.presenter = presenter
        super.init(nibName: "ManageViewController", bundle: nil)
    }

    required init?(coder aDecoder: NSCoder) {
        fatalError("init(coder:) has not been implemented")
    }
    
	override func viewDidLoad() {
        super.viewDidLoad()
        listFunction = [AppLanguage.Manage.EventManage.localized,AppLanguage.Manage.UserManage.localized,AppLanguage.Manage.SendNotice.localized]
        presenter.view = self
        presenter.viewDidLoad()
        setupUI()
        setupLanguage()
        addNav()
        
    }
    
    func setupLanguage(){
        lbHi.text = AppLanguage.Manage.HiAdmin.localized
    }
    
    func setupUI() {
        collectionView.delegate = self
        collectionView.dataSource = self
        collectionView.register(UINib(nibName: "ManageCell", bundle: nil), forCellWithReuseIdentifier: "ManageCell")
    }
    
    func addNav() {
        addMenuButton()
        addButtonImageToNavigation(image: AppIcon.icBellYellow!, style: .right, action: #selector(notification))
        self.navigationController?.hideShadowLine()
    }
    
    @objc func notification(){
        let sender = PushNotificationSender()
        sender.sendPushNotification(to: "", title: "Notification title", body: "Notification body")
    }

}
extension ManageViewController: UICollectionViewDelegateFlowLayout,UICollectionViewDelegate {
    
    func collectionView(_ collectionView: UICollectionView, layout collectionViewLayout: UICollectionViewLayout, sizeForItemAt indexPath: IndexPath) -> CGSize {
        return CGSize(width: collectionView.frame.width / 2 - 10, height: collectionView.frame.width / 2 - 10 )
    }
    
    func collectionView(_ collectionView: UICollectionView, layout collectionViewLayout: UICollectionViewLayout, minimumLineSpacingForSectionAt section: Int) -> CGFloat {
        return 0.000000
      }
    
    func collectionView(_ collectionView: UICollectionView, layout collectionViewLayout: UICollectionViewLayout, minimumInteritemSpacingForSectionAt section: Int) -> CGFloat {
        return 0.0000000
    }
    
}

extension ManageViewController: UICollectionViewDataSource {
    func collectionView(_ collectionView: UICollectionView, willDisplay cell: UICollectionViewCell, forItemAt indexPath: IndexPath) {
        self.collectionView.layoutIfNeeded()
        self.heightCollectionView.constant = self.collectionView.contentSize.height
    }
    
    func numberOfSections(in collectionView: UICollectionView) -> Int {
        return 1
    }
    
    func collectionView(_ collectionView: UICollectionView, numberOfItemsInSection section: Int) -> Int {
        return listFunction.count
    }
    
    func collectionView(_ collectionView: UICollectionView, didSelectItemAt indexPath: IndexPath) {
        switch indexPath.row {
        case 0:
            let ListEvent = ListEventViewController(presenter: ListEventPresenter())
            navigationController?.pushViewController(ListEvent, animated: true)
        case 1:
            let ListUser = ListUserViewController(presenter: ListUserPresenter())
            navigationController?.pushViewController(ListUser, animated: true)
        default:
            let SendNotice = PushNotificationViewController(presenter: PushNotificationPresenter())
            navigationController?.pushViewController(SendNotice, animated: true)
        }

    }
    
    func collectionView(_ collectionView: UICollectionView, cellForItemAt indexPath: IndexPath) -> UICollectionViewCell {
        if let cell = collectionView.dequeueReusableCell(withReuseIdentifier: "ManageCell", for: indexPath) as? ManageCell {
            cell.titleFunction.text = listFunction[indexPath.row]
            return cell
        }
        else {
            return UICollectionViewCell()
        }
    }
    
    
}
