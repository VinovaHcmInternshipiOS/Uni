//
//  SlideMenuPresenter.swift
//  Uni
//
//  Created nguyen gia huy on 10/11/2020.
//  Copyright Â© 2020 ___ORGANIZATIONNAME___. All rights reserved.
//
//  Template generated by Edward
//

import Foundation
import FirebaseDatabase
import FirebaseAuth
import Firebase
import UIKit
// MARK: View -
protocol SlideMenuViewProtocol: class {
    func signOutSuccess()
    func signOutFailed()
    func checkAuthSuccess(role:String)
    func checkAuthFailed()
}

// MARK: Presenter -
protocol SlideMenuPresenterProtocol: class {
	var view: SlideMenuViewProtocol? { get set }
    func signOut()
    func checkAuth(completion: @escaping(String)->Void)
}

class SlideMenuPresenter: SlideMenuPresenterProtocol {

    

    weak var view: SlideMenuViewProtocol?
    var ref = Database.database().reference()
    var databaseHandle = DatabaseHandle()
    var user = Auth.auth().currentUser
    func signOut() {
        do {
            try Auth.auth().signOut()
            view?.signOutSuccess()
            
        } catch _ {
            view?.signOutFailed()
        }
    }
    
    func checkAuth(completion: @escaping (String) -> Void) {
        let placeRef = self.ref.child("Users").child("\(user!.uid)").child("Auth")
        placeRef.observe(.value, with: { [self] snapshot in
            if(snapshot.exists())
            {
                let placeDict = snapshot.value as! [String: Any]
                let role = placeDict["Role"] as! String
                completion(role)
                view?.checkAuthSuccess(role: role)
            }
            
        })
    }
    
}
