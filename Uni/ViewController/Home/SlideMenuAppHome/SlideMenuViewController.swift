//
//  SlideMenuViewController.swift
//  Uni
//
//  Created nguyen gia huy on 10/11/2020.
//  Copyright Â© 2020 ___ORGANIZATIONNAME___. All rights reserved.
//
//  Template generated by Edward
//

import UIKit
enum MenuType: Int {
    case Home
    case About
    case Setting
    case FavoriteEvent
    case PrivacyPolicy
    case Manage
}
class SlideMenuViewController: BaseViewController {

    @IBOutlet var outsideSlideMenu: UIView!
    @IBOutlet weak var lbNameApp: UILabel!
    @IBOutlet weak var btLogout: UIButton!
    @IBOutlet weak var tableView: UITableView!

    var presenter: SlideMenuPresenterProtocol
    var arrayFeature = [String]()
    var didTapMenuType: ((MenuType) -> Void)?
    let caseMenu = "caseMenu"
	init(presenter: SlideMenuPresenterProtocol) {
        self.presenter = presenter
        super.init(nibName: "SlideMenuViewController", bundle: nil)
    }

    required init?(coder aDecoder: NSCoder) {
        fatalError("init(coder:) has not been implemented")
    }

	override func viewDidLoad() {
        super.viewDidLoad()
        //presenter.view = self
        setupUI()
        setupLanguage()
        defaultCaseMenu()
        lbNameApp.textColor = AppColor.YellowFAB32A
        btLogout.setTitleColor(AppColor.YellowFAB32A, for: .normal)
        presenter.checkAuth { [self] (role) in
            if role == "Admin" {
                arrayFeature = [AppLanguage.SlideMenu.Home.localized,AppLanguage.SlideMenu.About.localized,AppLanguage.SlideMenu.Setting.localized,AppLanguage.SlideMenu.Favorite.localized,AppLanguage.SlideMenu.Privacy.localized,AppLanguage.SlideMenu.Manage.localized]
                
            } else {
                arrayFeature = [AppLanguage.SlideMenu.Home.localized,AppLanguage.SlideMenu.About.localized,AppLanguage.SlideMenu.Setting.localized,AppLanguage.SlideMenu.Favorite.localized,AppLanguage.SlideMenu.Privacy.localized]
            }
            tableView.reloadData()
            
        }
        let tap = UITapGestureRecognizer(target: self, action: #selector(self.handleTap(_:)))
        outsideSlideMenu.addGestureRecognizer(tap)
    }
    @objc func handleTap(_ sender: UITapGestureRecognizer? = nil) {
        dismiss(animated: true, completion: nil)
    }
    
    func setupLanguage(){
        btLogout.setTitle(AppLanguage.SlideMenu.btLogout.localized, for: .normal)
    }
    
    func defaultCaseMenu(){
        //UserDefaults.standard.setValue(0, forKey: "caseMenu")
        if UserDefaults.standard.value(forKey: "caseMenu") == nil {
            UserDefaults.standard.setValue(0, forKey: "caseMenu")
        }
    }
    
    func setupUI() {
        tableView.delegate = self
        tableView.dataSource = self
        tableView.register(UINib(nibName: "SlideMenuCell", bundle: nil), forCellReuseIdentifier: "SlideMenuCell")
    }
    
    @IBAction func btLogout(_ sender: Any) {
        self.dismiss(animated: true, completion: { [self] in
            presenter.signOut()
        })
        
        
    }
}

extension SlideMenuViewController: UITableViewDelegate {
    
    func tableView(_ tableView: UITableView, heightForRowAt indexPath: IndexPath) -> CGFloat {
        return 60
    }
    
    func tableView(_ tableView: UITableView, viewForFooterInSection section: Int) -> UIView? {
        return UIView(frame: .zero)
    }
    
}

extension SlideMenuViewController: UITableViewDataSource {
    
    func tableView(_ tableView: UITableView, numberOfRowsInSection section: Int) -> Int {
        return arrayFeature.count
    }
    
    func numberOfSections(in tableView: UITableView) -> Int {
        return 1
    }
    
    func tableView(_ tableView: UITableView, didSelectRowAt indexPath: IndexPath) {
        guard let menuType = MenuType(rawValue: indexPath.row) else { return }
        guard let cell = tableView.dequeueReusableCell(withIdentifier: "SlideMenuCell", for: indexPath) as? SlideMenuCell else { return }
        
        let selectedCell = tableView.cellForRow(at: IndexPath(row: UserDefaults.standard.value(forKey: "caseMenu") as! Int, section: 0)) as! SlideMenuCell
        
        selectedCell.viewChoose.backgroundColor = UIColor(white: 1, alpha: 0.0)
        selectedCell.titleFeature.font = AppFont.Raleway_Regular_20
        selectedCell.titleFeature.textColor = .black
        
        let backgroundView = UIView()
        backgroundView.backgroundColor = UIColor(white: 1, alpha: 0.0)
        cell.selectedBackgroundView = backgroundView
        
        cell.viewChoose.backgroundColor = AppColor.YellowFAB32A
        cell.titleFeature.text = arrayFeature[indexPath.row].localized
        cell.titleFeature.textColor = .white
        cell.titleFeature.font = AppFont.Raleway_Bold_20
        
        //UserDefaults.standard.set(menuType.rawValue, forKey: "typeMenu")
        dismiss(animated: true, completion: nil)
        if menuType.rawValue != UserDefaults.standard.value(forKey: "caseMenu") as! Int {
            print("Dismissing: \(menuType)")
            self.didTapMenuType?(menuType)
        }
        UserDefaults.standard.set(indexPath.row, forKey: "caseMenu")
        
    }
    
    func tableView(_ tableView: UITableView, cellForRowAt indexPath: IndexPath) -> UITableViewCell {
        if let cell = tableView.dequeueReusableCell(withIdentifier: "SlideMenuCell", for: indexPath) as? SlideMenuCell {
            cell.titleFeature.text = arrayFeature[indexPath.row].localized
            
            let backgroundView = UIView()
            backgroundView.backgroundColor = UIColor(white: 1, alpha: 0.0)
            cell.selectedBackgroundView = backgroundView
            
             if indexPath.row == UserDefaults.standard.value(forKey: "caseMenu") as! Int {
                cell.viewChoose.backgroundColor = AppColor.YellowFAB32A
                cell.titleFeature.textColor = .white
                cell.titleFeature.font = AppFont.Raleway_Bold_20
            }
            
            return cell
        } else {
            return UITableViewCell()
        }
    }
    
    
}
