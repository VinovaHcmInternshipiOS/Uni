//
//  SlideMenuViewController.swift
//  Uni
//
//  Created nguyen gia huy on 10/11/2020.
//  Copyright Â© 2020 ___ORGANIZATIONNAME___. All rights reserved.
//
//  Template generated by Edward
//

import UIKit
enum MenuType: Int {
    case home
    case about
    case setting
    case privacy
}
class SlideMenuViewController: UIViewController, SlideMenuViewProtocol {

    @IBOutlet weak var tableView: UITableView!
    var presenter: SlideMenuPresenterProtocol
    let arrayFeature = ["Home","About","Setting","Privacy"]
    var didTapMenuType: ((MenuType) -> Void)?
	init(presenter: SlideMenuPresenterProtocol) {
        self.presenter = presenter
        super.init(nibName: "SlideMenuViewController", bundle: nil)
    }

    required init?(coder aDecoder: NSCoder) {
        fatalError("init(coder:) has not been implemented")
    }

	override func viewDidLoad() {
        super.viewDidLoad()

        presenter.view = self
        presenter.viewDidLoad()
        setupUI()
    }
    
    func setupUI() {
        tableView.delegate = self
        tableView.dataSource = self
        tableView.register(UINib(nibName: "SlideMenuCell", bundle: nil), forCellReuseIdentifier: "SlideMenuCell")
        tableView.register(UINib(nibName: "HeaderMenuCell", bundle: nil), forHeaderFooterViewReuseIdentifier: "HeaderMenuCell")
    }

}

extension SlideMenuViewController: UITableViewDelegate {
    func tableView(_ tableView: UITableView, viewForHeaderInSection section: Int) -> UIView? {
        if let headerView = tableView.dequeueReusableHeaderFooterView(withIdentifier: "HeaderMenuCell") as? HeaderMenuCell {
            headerView.contentView.backgroundColor = .white
            return headerView
        } else { return UIView()}
    }
    
    func tableView(_ tableView: UITableView, heightForHeaderInSection section: Int) -> CGFloat {

        return 150
        
    }
    
    func tableView(_ tableView: UITableView, heightForRowAt indexPath: IndexPath) -> CGFloat {
        return 60
    }
    
    func tableView(_ tableView: UITableView, viewForFooterInSection section: Int) -> UIView? {
        return UIView(frame: .zero)
    }
}

extension SlideMenuViewController: UITableViewDataSource {
    
    func tableView(_ tableView: UITableView, numberOfRowsInSection section: Int) -> Int {
        return arrayFeature.count
    }
    
    func numberOfSections(in tableView: UITableView) -> Int {
        return 1
    }
    
    func tableView(_ tableView: UITableView, didSelectRowAt indexPath: IndexPath) {
        guard let menuType = MenuType(rawValue: indexPath.row) else { return }
        guard let cell = tableView.dequeueReusableCell(withIdentifier: "SlideMenuCell", for: indexPath) as? SlideMenuCell else { return }
        cell.viewChoose.backgroundColor = AppColor.YellowFAB32A
        cell.contentView.backgroundColor = AppColor.YellowFAB32A
        tableView.deselectRow(at: indexPath, animated: true)
        dismiss(animated: true, completion: {
            print("Dismissing: \(menuType)")
            self.didTapMenuType?(menuType)
        })
    }
    
    func tableView(_ tableView: UITableView, cellForRowAt indexPath: IndexPath) -> UITableViewCell {
        if let cell = tableView.dequeueReusableCell(withIdentifier: "SlideMenuCell", for: indexPath) as? SlideMenuCell {
           // cell.viewChoose.roundCorners([.topRight,.bottomRight], radius: 20)
            cell.titleFeature.text = arrayFeature[indexPath.row]
            cell.selectionStyle = .none
            cell.contentView.roundCorners([.topRight,.bottomRight], radius: 20)
            return cell
        } else {
            return UITableViewCell()
        }
    }
    
    
}
