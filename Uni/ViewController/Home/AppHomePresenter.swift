//
//  AppHomePresenter.swift
//  Uni
//
//  Created nguyen gia huy on 02/11/2020.
//  Copyright Â© 2020 ___ORGANIZATIONNAME___. All rights reserved.
//
//  Template generated by Edward
//

import Foundation
import FirebaseAuth
import FirebaseDatabase
import Firebase
import FirebaseStorage
import UIKit
// MARK: View -
protocol AppHomeViewProtocol: class {
    func fetchProfileSuccess()
    func fetchProfileFailed()
    func fetchInfoEventHappeningSuccess()
    func fetchInfoEventHappeningFailed()
    func fetchInfoEventComingSoonSuccess()
    func fetchInfoEventComingSoonFailed()
    func fetchInfoEventEndedSuccess()
    func fetchInfoEventEndedFailed()
    func checkStateLiveSuccess()
    func likeEventSuccess()
    func likeEventFailed()
    func checkBadgeSuccess(amount:Int)
}

// MARK: Presenter -
protocol AppHomePresenterProtocol: class {
    
    var view: AppHomeViewProtocol? { get set }
    
    var profileUser: Home? {get set}
    var happeningEvent: [Event?] {get set}
    var comingsoonEvent: [Event?] {get set}
    var endedEvent: [Event?] {get set}
    func loadProfile()
    func getInfoEventHappening(currentDateTime:Date)
    func getInfoEventComingSoon(currentDateTime:Date)
    func getInfoEventEnded(currentDateTime: Date)
    func checkStateLive()
    func isLikeEvent(keyEvent:String,stateLike:Bool)
    func fetchBadge(code:String,dateCurrent:Date,isClockFormat12h:Bool)
    
    
}

class AppHomePresenter: AppHomePresenterProtocol {
    
    weak var view: AppHomeViewProtocol?
    var code = ""
    var ref = Database.database().reference()
    var databaseHandle = DatabaseHandle()
    var user = Auth.auth().currentUser
    var profileUser: Home?
    let storageRef = Storage.storage().reference()
    var happeningEvent: [Event?] = []
    var comingsoonEvent: [Event?] = []
    var endedEvent: [Event?] = []
    func getInfoEventHappening(currentDateTime: Date) {
        happeningEvent.removeAll()
        ref.child("Event").observeSingleEvent(of: .value) { [self] (snapshot) in
            if(snapshot.exists()) {
                for keyEvent in snapshot.children.allObjects as! [DataSnapshot] {
                    let placeRef = self.ref.child("Event/\(keyEvent.key)")
                    placeRef.observeSingleEvent(of:.value, with: { [self] snapshot in
                        if snapshot.exists()
                        {
                            let dict = snapshot.value as! [String: Any]
                            let title = dict["Title"] as! String
                            let date = dict["Date"] as! String
                            let checkin = dict["Checkin"] as! String
                            let checkout = dict["Checkout"] as! String
                            let key = dict["Key"] as! String
                            let type = dict["Type"] as! String
                            let urrlImage = dict["ImageLandscape"] as! String
                            
                            let placeRef = self.ref.child("Event/\(keyEvent.key)/Like/\(user?.uid ?? "")")
                            placeRef.observeSingleEvent(of:.value, with: { [self] snapshot in
                                if snapshot.exists()
                                {
                                    let dict = snapshot.value as! [String: Any]
                                    let like = dict["StateLike"] as! Bool
                                    let request = Event(title: title, key: key, date: date, checkout: checkout, checkin: checkin, type: type, urlImage: urrlImage, stateLike: like)
                                    if  currentDateTime >=  "\(date) \(checkin)".formatStringToDateTime24h() && currentDateTime <= "\(date) \(checkout)".formatStringToDateTime24h(){
                                        happeningEvent.append(request)
                                        view?.fetchInfoEventHappeningSuccess()
                                    } else {
                                        view?.fetchInfoEventHappeningFailed()
                                    }
                                } else {
                                    let request = Event(title: title, key: key, date: date, checkout: checkout, checkin: checkin, type: type, urlImage: urrlImage, stateLike: false)
                                    if  currentDateTime >=  "\(date) \(checkin)".formatStringToDateTime24h() && currentDateTime <= "\(date) \(checkout)".formatStringToDateTime24h(){
                                        happeningEvent.append(request)
                                        view?.fetchInfoEventHappeningSuccess()
                                    } else {
                                        view?.fetchInfoEventHappeningFailed()
                                    }
                                }
                                
                            })
                            
                        }
                        else
                        {
                            view?.fetchInfoEventHappeningFailed()
                        }
                    })
                    
                }
                
                
            } else {
                view?.fetchInfoEventHappeningFailed()
            }
        }
    }
    
    func getInfoEventComingSoon(currentDateTime:Date) {
        comingsoonEvent.removeAll()
        ref.child("Event").observeSingleEvent(of: .value) { [self] (snapshot) in
            if(snapshot.exists()) {
                for keyEvent in snapshot.children.allObjects as! [DataSnapshot] {
                    let placeRef = self.ref.child("Event/\(keyEvent.key)")
                    placeRef.observeSingleEvent(of:.value, with: { [self] snapshot in
                        if snapshot.exists()
                        {
                            let dict = snapshot.value as! [String: Any]
                            let title = dict["Title"] as! String
                            let date = dict["Date"] as! String
                            let checkin = dict["Checkin"] as! String
                            let checkout = dict["Checkout"] as! String
                            let key = dict["Key"] as! String
                            let type = dict["Type"] as! String
                            let urrlImage = dict["ImagePortal"] as! String
    
                            let placeRef = self.ref.child("Event/\(keyEvent.key)/Like/\(user?.uid ?? "")")
                            placeRef.observeSingleEvent(of:.value, with: { [self] snapshot in
                                if snapshot.exists()
                                {
                                    let dict = snapshot.value as! [String: Any]
                                    let like = dict["StateLike"] as! Bool
                                    let request = Event(title: title, key: key, date: date, checkout: checkout, checkin: checkin, type: type, urlImage: urrlImage, stateLike: like)
                                    if "\(date) \(checkin)".formatStringToDateTime24h() > currentDateTime {
                                        comingsoonEvent.append(request)
                                        view?.fetchInfoEventComingSoonSuccess()
                                    } else {
                                        view?.fetchInfoEventComingSoonFailed()
                                    }
                                } else {
                                    let request = Event(title: title, key: key, date: date, checkout: checkout, checkin: checkin, type: type, urlImage: urrlImage, stateLike: false)
                                    if "\(date) \(checkin)".formatStringToDateTime24h() > currentDateTime {
                                        comingsoonEvent.append(request)
                                        view?.fetchInfoEventComingSoonSuccess()
                                    } else {
                                        view?.fetchInfoEventComingSoonFailed()
                                    }
                                }
                                
                            })
                        }
                        else
                        {
                            view?.fetchInfoEventComingSoonFailed()
                        }
                    })
                    
                }
                
            } else {
                view?.fetchInfoEventComingSoonFailed()
            }
        }
    }
    
    func getInfoEventEnded(currentDateTime: Date) {
        endedEvent.removeAll()
        ref.child("Event").observeSingleEvent(of: .value) { [self] (snapshot) in
            if(snapshot.exists()) {
                for keyEvent in snapshot.children.allObjects as! [DataSnapshot] {
                    let placeRef = self.ref.child("Event/\(keyEvent.key)")
                    placeRef.observeSingleEvent(of:.value, with: { [self] snapshot in
                        if snapshot.exists()
                        {
                            let dict = snapshot.value as! [String: Any]
                            let title = dict["Title"] as! String
                            let date = dict["Date"] as! String
                            let checkin = dict["Checkin"] as! String
                            let checkout = dict["Checkout"] as! String
                            let key = dict["Key"] as! String
                            let type = dict["Type"] as! String
                            let urrlImage = dict["ImagePortal"] as! String
                            let placeRef = self.ref.child("Event/\(keyEvent.key)/Like/\(user?.uid ?? "")")
                            placeRef.observeSingleEvent(of:.value, with: { [self] snapshot in
                                if snapshot.exists()
                                {
                                    let dict = snapshot.value as! [String: Any]
                                    let like = dict["StateLike"] as! Bool
                                    let request = Event(title: title, key: key, date: date, checkout: checkout, checkin: checkin, type: type, urlImage: urrlImage, stateLike: like)
                                    if "\(date) \(checkout)".formatStringToDateTime24h() < currentDateTime {
                                        endedEvent.append(request)
                                        view?.fetchInfoEventEndedSuccess()
                                    } else {
                                        view?.fetchInfoEventEndedFailed()
                                    }
                                } else {
                                    let request = Event(title: title, key: key, date: date, checkout: checkout, checkin: checkin, type: type, urlImage: urrlImage, stateLike: false)
                                    if "\(date) \(checkout)".formatStringToDateTime24h() < currentDateTime {
                                        endedEvent.append(request)
                                        view?.fetchInfoEventEndedSuccess()
                                    } else {
                                        view?.fetchInfoEventEndedFailed()
                                    }
                                }
                                
                            })

                        }
                        else
                        {
                            view?.fetchInfoEventEndedFailed()
                        }
                    })
                    
                }
            } else {
                view?.fetchInfoEventEndedFailed()
            }
        }
    }
    
    func loadProfile(){
        guard let user = user else { return }
        let placeRef = self.ref.child("Users").child("\(user.uid)")
        placeRef.observe(.value, with: { [self] snapshot in
            if(snapshot.exists())
            {
                let placeDict = snapshot.value as! [String: Any]
                let code = placeDict["Code"] as! String
                let placeRef = self.ref.child("Data").child("\(code)")
                placeRef.observe(.value, with: { [self] snapshot in
                    if(snapshot.exists())
                    {
                        let placeDict = snapshot.value as! [String: Any]
                        let name = placeDict["Name"] as! String
                        let faculty = placeDict["Faculty"] as! String
                        let urlImage = placeDict["Image"] as! String
                        
                        profileUser = Home(code: code, name: name,faculty: faculty, urlImage: urlImage)
                        view?.fetchProfileSuccess()
                        
                    }
                    else
                    {
                        view?.fetchProfileFailed()
                    }
                })
                
                
            }
            else
            {
                view?.fetchProfileFailed()
            }
        })
    }
    
    func checkStateLive() {
        if let user = user?.uid {
            let placeRef = self.ref.child("Users").child("\(user)").child("Auth")
            placeRef.observe(.value, with: { [self] snapshot in
                if(snapshot.exists())
                {
                    let placeDict = snapshot.value as! [String: Any]
                    let state = placeDict["State"] as! Bool
                    if(state == false ) {
                        view?.checkStateLiveSuccess()
                    }
                }
            })
        } else {return}
    }
    
    func isLikeEvent(keyEvent: String, stateLike: Bool) {
        let path = self.ref.child("Event/\(keyEvent)/Like/\(user?.uid ?? "")/").child("StateLike")
        path.setValue(stateLike) { [self]
            (error:Error?, ref:DatabaseReference) in
            if error != nil {
                view?.likeEventFailed()
            }
            else
            {
                view?.likeEventSuccess()
            }
        }
    }
    
    func fetchBadge(code:String,dateCurrent:Date,isClockFormat12h:Bool) {
        ref.child("Notification").observe(.value) { [self] (snapshot) in
            if snapshot.exists() {
                var countRead = 0
                var countUnRead = 0
                for keyNotification in snapshot.children.allObjects as! [DataSnapshot] {
                    let placeRef = self.ref.child("Notification/\(keyNotification.key)")
                    placeRef.observeSingleEvent(of:.value, with: { [self] snapshot in
                        if snapshot.exists()
                        {
                            let dict = snapshot.value as! [String: Any]
                            let date = dict["Date"] as! String
                            let calendar = Calendar.current
                            let componentsTime = calendar.dateComponents([.day,.month,.year,.hour,.minute,.second], from: isClockFormat12h == true ? ((date.formatterDateTime12h()).toDateTimeFormat(format: "dd-MM-yyyy hh:mma")) : ((date.formatterDateTime24h()).toDateTimeFormat(format: "dd-MM-yyyy HH:mm")), to: dateCurrent)
                            let placeRef = self.ref.child("Notification/\(keyNotification.key)/List/\(code)")
                            placeRef.observeSingleEvent(of:.value, with: { [] snapshot in
                                if snapshot.exists() {
                                    if componentsTime.day ?? 0 <= 7{
                                        countRead += 1
                                    }
                                } else {
                                    if componentsTime.day ?? 0 <= 7{
                                        countUnRead += 1
                                    }
                                }
                                //view?.checkBadgeSuccess(amount:countUnRead)
                                view?.checkBadgeSuccess(amount:countUnRead)
                                print(11111,countRead,countUnRead)
                            })
                        }
                        else
                        {
                          
                        }
                    })
                    
                }
                
            } else {
                
            }
        }
//        ref.child("Notification").observe(.value) { [self] (snapshotNoti) in
//            if snapshotNoti.exists() {
//                for keyNotification in snapshotNoti.children.allObjects as! [DataSnapshot] {
//                    let placeRef = self.ref.child("Notification/\(keyNotification.key)/List")
//                    placeRef.observe(.value, with: { [] snapshot in
//                     //   if snapshot.exists() {
//                        var countRead = 0
//                            for codeUser in snapshot.children.allObjects as! [DataSnapshot] {
//                                if codeUser.key == code {
//                                    countRead += 1
//                                    if countRead == snapshotNoti.childrenCount {
//                                        view?.checkBadgeSuccess(amount: 0)
//                                    } else {
//                                        view?.checkBadgeSuccess(amount: Int(snapshotNoti.childrenCount) - countRead )
//                                    }
//                                } else {
//
//                                }
//                                print(111111,countRead)
//                            }
//                    //}
//                    })
//
//                }
//            } else {
//
//            }
//        }
//    }
    }
}
