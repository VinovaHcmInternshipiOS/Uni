//
//  AppHomeViewController.swift
//  Uni
//
//  Created nguyen gia huy on 02/11/2020.
//  Copyright Â© 2020 ___ORGANIZATIONNAME___. All rights reserved.
//
//  Template generated by Edward
//

import UIKit

class AppHomeViewController: UIViewController, AppHomeViewProtocol {

    @IBOutlet weak var collectionEnded: UICollectionView!
    @IBOutlet weak var collectionHappenning: UICollectionView!
    @IBOutlet weak var collectionComingSoon: UICollectionView!
    @IBOutlet weak var pageControl: UIPageControl!
    var presenter: AppHomePresenterProtocol
    let transition = SlideInTransition()
    var item = [1,2,3,4,5,6,7,8,9,10]
    var indexPageControl = 0
    var menuState = false
	init(presenter: AppHomePresenterProtocol) {
        self.presenter = presenter
        super.init(nibName: "AppHomeViewController", bundle: nil)
    }

    required init?(coder aDecoder: NSCoder) {
        fatalError("init(coder:) has not been implemented")
    }

	override func viewDidLoad() {
        super.viewDidLoad()
        
        presenter.view = self
        presenter.viewDidLoad()
        navigationController?.navigationBar.isHidden = false
        setupXIB()
        setupNav(titleNav: "Home")
    }
    
    func setupXIB() {
        collectionHappenning.delegate = self
        collectionHappenning.dataSource = self
        collectionHappenning.register(UINib(nibName: "HappenningCellAppHome", bundle: nil), forCellWithReuseIdentifier: "HappenningCellAppHome")
        // Reused Cell Comming Soon & Ended
        collectionComingSoon.delegate = self
        collectionComingSoon.dataSource = self
        collectionComingSoon.register(UINib(nibName: "ComingSoonEndedCellAppHome", bundle: nil), forCellWithReuseIdentifier: "ComingSoonEndedCellAppHome")
        
        collectionEnded.delegate = self
        collectionEnded.dataSource = self
        collectionEnded.register(UINib(nibName: "ComingSoonEndedCellAppHome", bundle: nil), forCellWithReuseIdentifier: "ComingSoonEndedCellAppHome")
        pageControl.currentPage = indexPageControl
        //
    }
    
    
    
    func setupNav(titleNav: String){
        navigationController?.navigationBar.barStyle = .black
        navigationItem.title = titleNav
   
        navigationController?.navigationBar.barTintColor = .white //Background
        let attributes = [NSAttributedString.Key.foregroundColor: UIColor.white] //Text Color
        navigationController?.navigationBar.titleTextAttributes = attributes
        
        let createBtn = UIBarButtonItem(image: UIImage(systemName: "plus"), style: .plain, target: self, action: nil)
        createBtn.tintColor = AppColor.YellowFAB32A
        navigationItem.rightBarButtonItem = createBtn
        let sortBtn = UIBarButtonItem(image: UIImage(systemName: "line.horizontal.3.decrease.circle"), style: .plain, target: self, action: nil)
        sortBtn.tintColor = AppColor.YellowFAB32A
        navigationItem.leftBarButtonItem = sortBtn
        sortBtn.target = self
        sortBtn.action = #selector(action)

        
        
    }
    @objc func action (sender:UIButton) {
        let menu = SlideMenuViewController(presenter: SlideMenuPresenter())
        menu.didTapMenuType = { MenuType in
            self.transitionToNewContent(MenuType)
        }
        menu.modalPresentationStyle = .overCurrentContext
        menu.transitioningDelegate = self
        self.present(menu,animated: true, completion: nil)
    }
    
    func transitionToNewContent(_ menuType: MenuType) {
        let title = String(describing: menuType).capitalized
        print(title)
    }
    @IBAction func btLeaderboard(_ sender: Any) {
        let leaderBoard = RankViewController(presenter: RankPresenter())
        self.navigationController?.pushViewController(leaderBoard, animated: true)
    }
    @IBAction func btSearchEvent(_ sender: Any) {
        let searchEvent = SearchAppHomeViewController(presenter: SearchAppHomePresenter())
        self.navigationController?.pushViewController(searchEvent, animated: true)
    }
    @IBAction func btHistoryEvent(_ sender: Any) {
        let historyEvent = HistoryEventViewController(presenter: HistoryEventPresenter())
        self.navigationController?.pushViewController(historyEvent, animated: true)
    }
    @IBAction func btBarcode(_ sender: Any) {
        let barcode = BarcodeViewController(presenter: BarcodePresenter())
        self.navigationController?.pushViewController(barcode, animated: true)
    }
    
    
}

extension AppHomeViewController: UICollectionViewDelegate,UICollectionViewDataSource,UICollectionViewDelegateFlowLayout {
    func collectionView(_ collectionView: UICollectionView, layout collectionViewLayout: UICollectionViewLayout, sizeForItemAt indexPath: IndexPath) -> CGSize {
        if(collectionView == collectionHappenning) {
            return CGSize(width: collectionView.frame.width, height: collectionView.frame.height)
        } else {
            return CGSize(width: collectionView.frame.width / 2 , height: collectionView.frame.height)
        }
    }
    
    func collectionView(_ collectionView: UICollectionView, numberOfItemsInSection section: Int) -> Int {
        pageControl.numberOfPages = item.count
        return item.count
    }
    
    func collectionView(_ collectionView: UICollectionView, didSelectItemAt indexPath: IndexPath) {
        let detailEvent = DetailEventViewController(presenter: DetailEventPresenter())
        self.navigationController?.pushViewController(detailEvent, animated: true)
    }
    func scrollViewDidEndDecelerating(_ scrollView: UIScrollView) {
        for cell in collectionHappenning.visibleCells {
          if let indexPath = collectionHappenning.indexPath(for: cell) {
            indexPageControl = indexPath.row
            pageControl.currentPage = indexPageControl
          }
        }
      }
    
    func collectionView(_ collectionView: UICollectionView, cellForItemAt indexPath: IndexPath) -> UICollectionViewCell {
        if collectionView == collectionHappenning {
            guard let cell = collectionView.dequeueReusableCell(withReuseIdentifier: "HappenningCellAppHome", for: indexPath) as? HappenningCellAppHome else {return UICollectionViewCell()}
            return cell
        }
        else if collectionView == collectionComingSoon {
            guard let cell = collectionView.dequeueReusableCell(withReuseIdentifier: "ComingSoonEndedCellAppHome", for: indexPath) as? ComingSoonEndedCellAppHome else {return UICollectionViewCell()}
            cell.titleEvent.text = "Origami CraneOrigami CraneOrigami CraneOrigami Crane"
            return cell
        }
        else {
            guard let cell = collectionView.dequeueReusableCell(withReuseIdentifier: "ComingSoonEndedCellAppHome", for: indexPath) as? ComingSoonEndedCellAppHome else {return UICollectionViewCell()}
            cell.titleEvent.text = "Origami CraneOrigami CraneOrigami CraneOrigami Crane"
            return cell
        }
        
        
    }
    
    func collectionView(_ collectionView: UICollectionView, layout collectionViewLayout: UICollectionViewLayout, minimumLineSpacingForSectionAt section: Int) -> CGFloat {
        switch collectionView {
        case collectionHappenning:
            return 0.00000000000000001
        case collectionComingSoon:
            return 0.00000000000000001
        default:
            return 0
        }
       
        
      }
    
    func collectionView(_ collectionView: UICollectionView, layout collectionViewLayout: UICollectionViewLayout, minimumInteritemSpacingForSectionAt section: Int) -> CGFloat {
        switch collectionView {
        case collectionHappenning:
            return 0.00000000000000001
        case collectionComingSoon:
            return 0.00000000000000001
        default:
            return 0
        }
        
      }
    
    
}

extension AppHomeViewController: UIViewControllerTransitioningDelegate {
    func animationController(forPresented presented: UIViewController, presenting: UIViewController, source: UIViewController) -> UIViewControllerAnimatedTransitioning? {
        transition.isPresenting = true
        return transition
    }
    func animationController(forDismissed dismissed: UIViewController) -> UIViewControllerAnimatedTransitioning? {
        transition.isPresenting = false
        return transition
    }
    

}
