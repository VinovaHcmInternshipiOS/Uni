//
//  AppHomeViewController.swift
//  Uni
//
//  Created nguyen gia huy on 02/11/2020.
//  Copyright Â© 2020 ___ORGANIZATIONNAME___. All rights reserved.
//
//  Template generated by Edward
//

import UIKit

class AppHomeViewController:BaseViewController{
    @IBOutlet weak var imgUser: UIImageView!
    @IBOutlet weak var lbName: UILabel!
    @IBOutlet weak var lbID: UILabel!
    @IBOutlet weak var lbFaculty: UILabel!
    @IBOutlet weak var btRank: UIButton!
    
    @IBOutlet weak var collectionEnded: UICollectionView!
    @IBOutlet weak var collectionHappenning: UICollectionView!
    @IBOutlet weak var collectionComingSoon: UICollectionView!
    @IBOutlet weak var pageControl: UIPageControl!
    var presenter: AppHomePresenterProtocol
    var item = [1,2,3,4,5,6,7,8,9,10]
    var indexPageControl = 0
    var menuState = false
    var ListEvent = [Event?]()
    
    var listEventHappening = [Event?]()
    var listEventComingSoon = [Event?]()
    var listEventEnded = [Event?]()
    
    init(presenter: AppHomePresenterProtocol) {
        self.presenter = presenter
        super.init(nibName: "AppHomeViewController", bundle: nil)
    }
    
    required init?(coder aDecoder: NSCoder) {
        fatalError("init(coder:) has not been implemented")
    }
    
    override func viewDidLoad() {
        super.viewDidLoad()
        presenter.view = self
        addNav()
        setupXIB()
        presenter.loadProfile()

        presenter.getInfoEventHappening()
        presenter.getInfoEventComingSoon()
        presenter.getInfoEventEnded()
        
        
        
        
    }
    
    func setupXIB() {
        collectionHappenning.delegate = self
        collectionHappenning.dataSource = self
        collectionHappenning.register(UINib(nibName: "HappenningCellAppHome", bundle: nil), forCellWithReuseIdentifier: "HappenningCellAppHome")
        // Reused Cell Comming Soon & Ended
        collectionComingSoon.delegate = self
        collectionComingSoon.dataSource = self
        collectionComingSoon.register(UINib(nibName: "ComingSoonEndedCellAppHome", bundle: nil), forCellWithReuseIdentifier: "ComingSoonEndedCellAppHome")
        
        collectionEnded.delegate = self
        collectionEnded.dataSource = self
        collectionEnded.register(UINib(nibName: "ComingSoonEndedCellAppHome", bundle: nil), forCellWithReuseIdentifier: "ComingSoonEndedCellAppHome")
        pageControl.currentPage = indexPageControl
        //
    }
    func addNav() {
        addMenuButton()
        addButtonImageToNavigation(image: AppIcon.icBellYellow!, style: .right, action: nil)
        self.navigationController?.hideShadowLine()
    }
    
    @IBAction func btLeaderboard(_ sender: UIButton) {
        sender.animationScale()
        let leaderBoard = RankViewController(presenter: RankPresenter())
        self.navigationController?.pushViewController(leaderBoard, animated: true)
    }
    @IBAction func btSearchEvent(_ sender: UIButton) {
        sender.animationScale()
        let searchEvent = SearchAppHomeViewController(presenter: SearchAppHomePresenter())
        self.navigationController?.pushViewController(searchEvent, animated: true)
    }
    @IBAction func btHistoryEvent(_ sender: UIButton) {
        sender.animationScale()
        let historyEvent = HistoryEventViewController(presenter: HistoryEventPresenter())
        self.navigationController?.pushViewController(historyEvent, animated: true)
    }
    @IBAction func btBarcode(_ sender: UIButton) {
        sender.animationScale()
        let barcode = BarcodeViewController(presenter: BarcodePresenter())
        self.navigationController?.pushViewController(barcode, animated: true)
    }
    
    
}

extension AppHomeViewController: UICollectionViewDelegate,UICollectionViewDataSource,UICollectionViewDelegateFlowLayout {
    func collectionView(_ collectionView: UICollectionView, layout collectionViewLayout: UICollectionViewLayout, sizeForItemAt indexPath: IndexPath) -> CGSize {
        if(collectionView == collectionHappenning) {
            return CGSize(width: collectionView.frame.width, height: collectionView.frame.height)
        } else {
            return CGSize(width: collectionView.frame.width / 2 , height: collectionView.frame.height)
        }
    }
    
    func collectionView(_ collectionView: UICollectionView, numberOfItemsInSection section: Int) -> Int {
        pageControl.numberOfPages = listEventHappening.count
        switch collectionView {
        case collectionHappenning:
            return listEventHappening.count
        case collectionComingSoon:
            return listEventComingSoon.count
        case collectionEnded:
            return listEventEnded.count
        default:
            break
        }
        return 0
    }
    
    func collectionView(_ collectionView: UICollectionView, didSelectItemAt indexPath: IndexPath) {
        let detailEvent = DetailEventViewController(presenter: DetailEventPresenter())
        if collectionView == collectionHappenning {
            detailEvent.keyDetailEvent = (listEventHappening[indexPath.row]?.key)!
           
        } else if collectionView == collectionComingSoon {
            detailEvent.keyDetailEvent = (listEventComingSoon[indexPath.row]?.key)!
            
        } else {
            detailEvent.keyDetailEvent = (listEventEnded[indexPath.row]?.key)!
           
        }
        self.navigationController?.pushViewController(detailEvent, animated: true)
        
    }
    func scrollViewDidEndDecelerating(_ scrollView: UIScrollView) {
        for cell in collectionHappenning.visibleCells {
            if let indexPath = collectionHappenning.indexPath(for: cell) {
                indexPageControl = indexPath.row
                pageControl.currentPage = indexPageControl
            }
        }
    }
    
    func collectionView(_ collectionView: UICollectionView, cellForItemAt indexPath: IndexPath) -> UICollectionViewCell {
        if collectionView == collectionHappenning {
            guard let cell = collectionView.dequeueReusableCell(withReuseIdentifier: "HappenningCellAppHome", for: indexPath) as? HappenningCellAppHome else {return UICollectionViewCell()}
                if let profileURL = listEventHappening[indexPath.row]?.urlImage {
                    cell.imageCell.loadImage(urlString: profileURL)
                }
            return cell
        }
        else if collectionView == collectionComingSoon {
            guard let cell = collectionView.dequeueReusableCell(withReuseIdentifier: "ComingSoonEndedCellAppHome", for: indexPath) as? ComingSoonEndedCellAppHome else {return UICollectionViewCell()}
                let dateFormatter = DateFormatter()
                dateFormatter.dateFormat = "dd-MM-yyyy"
                let dateTime = dateFormatter.date(from: (listEventComingSoon[indexPath.row]?.date)!)
                dateFormatter.dateFormat = "dd MMM"
                cell.timeEvent.text = "\(dateFormatter.string(from: dateTime!))\n\(listEventComingSoon[indexPath.row]?.checkin ?? "")-\(listEventComingSoon[indexPath.row]?.checkout ?? "")"
                cell.titleEvent.text = listEventComingSoon[indexPath.row]?.title
                //cell.setData(event: listEventComingSoon[indexPath.row])
                if let profileURL = listEventComingSoon[indexPath.row]?.urlImage {
                    cell.imageView.loadImage(urlString: profileURL)
                }
                return cell
        }
        else {
            guard let cell = collectionView.dequeueReusableCell(withReuseIdentifier: "ComingSoonEndedCellAppHome", for: indexPath) as? ComingSoonEndedCellAppHome else {return UICollectionViewCell()}
                let dateFormatter = DateFormatter()
                dateFormatter.dateFormat = "dd-MM-yyyy"
                let dateTime = dateFormatter.date(from: (listEventEnded[indexPath.row]?.date)!)
                dateFormatter.dateFormat = "dd MMM"
                cell.timeEvent.text = "\(dateFormatter.string(from: dateTime!))\n\(listEventEnded[indexPath.row]?.checkin ?? "")-\(listEventEnded[indexPath.row]?.checkout ?? "")"
                cell.titleEvent.text = listEventEnded[indexPath.row]?.title
                //cell.setData(event: listEventEnded[indexPath.row])
                if let profileURL = listEventEnded[indexPath.row]?.urlImage {
                    cell.imageView.loadImage(urlString: profileURL)
                }
                return cell
            
        }
        
        
    }
    
    func collectionView(_ collectionView: UICollectionView, layout collectionViewLayout: UICollectionViewLayout, minimumLineSpacingForSectionAt section: Int) -> CGFloat {
        switch collectionView {
        case collectionHappenning:
            return 0.00000000000000001
        case collectionComingSoon:
            return 0.00000000000000001
        case collectionEnded:
            return 0.00000000000000001
        default:
            return 0
        }
        
        
    }
    
    func collectionView(_ collectionView: UICollectionView, layout collectionViewLayout: UICollectionViewLayout, minimumInteritemSpacingForSectionAt section: Int) -> CGFloat {
        switch collectionView {
        case collectionHappenning:
            return 0.00000000000000001
        case collectionComingSoon:
            return 0.00000000000000001
        case collectionEnded:
            return 0.00000000000000001
        default:
            return 0
        }
        
    }
    
    
}

extension AppHomeViewController: AppHomeViewProtocol {
    func fetchInfoEventHappeningSuccess() {
        listEventHappening = presenter.happeningEvent
        collectionHappenning.reloadData()
    }
    
    func fetchInfoEventHappeningFailed() {
        print("Fetch info event happening error")
    }
    
    func fetchInfoEventComingSoonSuccess() {
        listEventComingSoon = presenter.comingsoonEvent
        collectionComingSoon.reloadData()
    }
    
    func fetchInfoEventComingSoonFailed() {
        print("Fetch info event comingsoon error")
    }
    
    func fetchInfoEventEndedSuccess() {
        listEventEnded = presenter.endedEvent
        collectionEnded.reloadData()
    }
    
    func fetchInfoEventEndedFailed() {
        print("Fetch info event ended error")
    }
    
    
    
    func fetchProfileSuccess() {
        let profile = presenter.profileUser
        if let profile = profile {
            lbName.text = profile.name
            lbID.text = profile.code
            lbFaculty.text = profile.faculty
            imgUser.loadImage(urlString: profile.urlImage!)
        } else { return }
        
        
    }
    
    func fetchProfileFailed() {
        print("Fetch profile user error")
    }
    
    
}

