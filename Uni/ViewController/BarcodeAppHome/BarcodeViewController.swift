//
//  BarcodeViewController.swift
//  Uni
//
//  Created nguyen gia huy on 10/11/2020.
//  Copyright Â© 2020 ___ORGANIZATIONNAME___. All rights reserved.
//
//  Template generated by Edward
//

import UIKit
import Pulsator
class BarcodeViewController: BaseViewController {

	var presenter: BarcodePresenterProtocol

    @IBOutlet weak var lbYourBarcode: UILabel!
    @IBOutlet weak var lbAttention: UILabel!
    @IBOutlet weak var lbBarcode: UILabel!
    @IBOutlet weak var barcodeView: UIImageView!
    var timeCount = Timer()
    var timeEnd = Int()
    var count = 60
    init(presenter: BarcodePresenterProtocol) {
        self.presenter = presenter
        super.init(nibName: "BarcodeViewController", bundle: nil)
    }

    required init?(coder aDecoder: NSCoder) {
        fatalError("init(coder:) has not been implemented")
    }

	override func viewDidLoad() {
        super.viewDidLoad()
        setupLanguage()
        presenter.view = self
        presenter.fetchProfile()
        lbAttention.textColor = AppColor.YellowFAB32A
        
        
    }
    override func viewDidDisappear(_ animated: Bool) {
        UIScreen.main.brightness = CGFloat(0.5)
        timeCount.invalidate()
        presenter.deleteFakeCodeNoCreate()
    }
    
    func setupLanguage(){
        lbYourBarcode.text = AppLanguage.Barcode.YourBarcode.localized
        lbAttention.text = AppLanguage.Barcode.Pleasegive.localized
    }
    
   
    
    @objc func generate(){
        count = count - 1
        lbBarcode.text = "\(count)s"
        
        if timeEnd == getTimeInveral() {
            timeCount.invalidate()
            presenter.deleteFakeCode()
            count = 60
        }
    }
    
    override func viewWillAppear(_ animated: Bool) {
           UIScreen.main.brightness = CGFloat(1)
    }
    
    func generateBarcode(from string: String) -> UIImage? {
        let data = string.data(using: String.Encoding.ascii)
        
        if let filter = CIFilter(name: "CICode128BarcodeGenerator") {
            filter.setValue(data, forKey: "inputMessage")
            guard let colorFilter = CIFilter(name: "CIFalseColor") else { return nil}
            colorFilter.setValue(filter.outputImage, forKey: "inputImage")
            colorFilter.setValue(CIColor(red: 255/255, green: 255/255, blue: 255/255), forKey: "inputColor1") //background color
            colorFilter.setValue(CIColor(red: 0, green: 0, blue: 0), forKey: "inputColor0") //tint color
            guard colorFilter.outputImage != nil
            else
            {
                return nil
            }
            let transform = CGAffineTransform(scaleX: 30, y: 30)
            
            if let output = colorFilter.outputImage?.transformed(by: transform) {
                
                return UIImage(ciImage: output)
            }
        }
        return nil
    }
}

extension BarcodeViewController: BarcodeViewProtocol {
    func createCodeSuccess(fakeCode:String,created: Int) {
        barcodeView.image = generateBarcode(from: fakeCode)
        timeEnd = created + 60
        timeCount = Timer.scheduledTimer(timeInterval: 1, target: self, selector: #selector(generate), userInfo: nil, repeats: true)
    }
    
    func createCodeFailed() {
        print("failed")
    }
    
    func fetchProfileSuccess() {
        presenter.createCode(fakeCode: presenter.randomString(length:10), created: getTimeInveral())
    }
    
    func fetchProfileFailed() {
        print("create barcode failed")
    }
    
    
}
