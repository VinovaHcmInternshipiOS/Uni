//
//  NotificationPresenter.swift
//  Uni
//
//  Created nguyen gia huy on 25/12/2020.
//  Copyright Â© 2020 ___ORGANIZATIONNAME___. All rights reserved.
//
//  Template generated by Edward
//

import UIKit
import Foundation
import FirebaseMessaging
import UserNotifications
import FirebaseAuth
import FirebaseDatabase
import Firebase

// MARK: View -
protocol NotificationViewProtocol: class {
    func fetchNotificationSuccess()
    func fetchNotificationFailed()
}

// MARK: Presenter -
protocol NotificationPresenterProtocol: class {
    var view: NotificationViewProtocol? { get set }
    var code:String? {get set}
    var infoNotification: [NotificationUser?] {get set}
    func fetchNotification()
    func seenNotification(keyNotification:String,date:String)
}

class NotificationPresenter: NotificationPresenterProtocol {
    var code:String?
    
    weak var view: NotificationViewProtocol?
    var ref = Database.database().reference()
    var databaseHandle = DatabaseHandle()
    var infoNotification: [NotificationUser?] = []
    
    init(code: String) {
        self.code = code
    }
    
    func fetchNotification() {
        infoNotification.removeAll()
        ref.child("Notification").observeSingleEvent(of:.value) { [self] (snapshot) in
            if snapshot.exists() {
                for keyNotification in snapshot.children.allObjects as! [DataSnapshot] {
                    let placeRef = self.ref.child("Notification/\(keyNotification.key)")
                    placeRef.observeSingleEvent(of:.value, with: { [self] snapshot in
                        if snapshot.exists()
                        {
                            let dict = snapshot.value as! [String: Any]
                            let title = dict["Title"] as! String
                            let content = dict["Content"] as! String
                            let date = dict["Date"] as! String
                            let placeRef = self.ref.child("Notification/\(keyNotification.key)/List/\(code ?? "")")
                            placeRef.observeSingleEvent(of:.value, with: { [self] snapshot in
                                snapshot.exists() == true ? infoNotification.insert(NotificationUser(keyNotification: keyNotification.key,title: title, content: content, date: date,state: true), at: 0) : infoNotification.insert(NotificationUser(keyNotification: keyNotification.key,title: title, content: content, date: date,state: false), at: 0)
                                view?.fetchNotificationSuccess()
                            })
                            
                        }
                        else
                        {
                            view?.fetchNotificationFailed()
                        }
                    })
                    
                }
            } else {
                view?.fetchNotificationFailed()
            }
        }
    }
    
    func seenNotification(keyNotification:String,date:String) {
        if let code = code {
            let placeRef = self.ref.child("Notification/\(keyNotification)")
            placeRef.observeSingleEvent(of:.value, with: { [self] snapshot in
                if snapshot.exists() {
                    let placeRef = self.ref.child("Notification/\(keyNotification)/List\(code)")
                    placeRef.observeSingleEvent(of:.value, with: { [self] snapshot in
                        if !snapshot.exists() {
                            let path = self.ref.child("Notification").child(keyNotification).child("List/\(code)")
                            let sentValue = ["Date":"\(date)"] as [String : Any]
                            path.setValue(sentValue)
                        }
                    })
                } else {
                    
                }
            })
            
            
        } else {return}
        
    }
    
    
    
}
